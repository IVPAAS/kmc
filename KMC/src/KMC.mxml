<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.kaltura.kmc.view.*" layout="absolute"
				minWidth="955" minHeight="600" creationComplete="creationCompleteHandler(event)" paddingLeft="0"
				paddingRight="0" paddingBottom="0" paddingTop="0" verticalGap="0">
	<mx:Script>
		<![CDATA[
			import com.flexspy.FlexSpy;
			import com.kaltura.KalturaClient;
			import com.kaltura.commands.MultiRequest;
			import com.kaltura.commands.uiConf.UiConfGet;
			import com.kaltura.config.KalturaConfig;
			import com.kaltura.events.KalturaEvent;
			import com.kaltura.kmc.business.KmcModuleLoader;
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.business.PermissionsParser;
			import com.kaltura.kmc.events.KmcErrorEvent;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.events.KmcModuleEvent;
			import com.kaltura.kmc.events.KmcNavigationEvent;
			import com.kaltura.kmc.model.KmcModelLocator;
			import com.kaltura.kmc.modules.KmcModule;
			import com.kaltura.utils.KUtils;
			import com.kaltura.utils.ObjectHelpers;
			import com.kaltura.vo.KalturaUiConf;
			
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.Container;
			import mx.core.FlexBitmap;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ModuleEvent;
			import mx.events.StyleEvent;
			import mx.modules.ModuleLoader;

			// ==============================================================================
			// members
			// ==============================================================================

			/**
			 * a global access point to the application's flashvars,
			 * all keys are converted to lower case and no underscores.
			 * */
			private var _flashvars:Object;

			/**
			 * application model
			 * */
			private var _modelLocator:KmcModelLocator = KmcModelLocator.getInstance();

			/**
			 * module loader
			 * */
			private var _kmcModuleLoader:KmcModuleLoader;

			/**
			 * path from KMC.swf to module swfs.
			 * */
			private var _modulesFolder:String = "modules";

			/**
			 * KMC UIConf
			 * */
			private var _uiconf:XML;

			/**
			 * Global Context menu
			 * */
			private var _cm:ContextMenu;

			/**
			 * url of the help page. it is concatenated to all help requests,
			 * so the help event supplies only the anchor in the help page.
			 * */
			private var _helpBaseUrl:String;


			/**
			 * the module KMC should start with, as determined by the url hash
			 * */
			private var _startModule:Object;


			/**
			 * KMC version
			 * */
			public var VERSION:String = "1.0.0";
			
			
			
			/**
			 * Singletone PermissionManager
			 **/
			
			public var permissionManager:PermissionManager  = PermissionManager.getInstance();


			// ==============================================================================
			// methods
			// ==============================================================================

			/**
			 * load skin dynamically
			 * @param path	path to skin .swf file
			 * */
			protected function loadSkin(path:String = ""):void {
				var eventDispatcher:IEventDispatcher = StyleManager.loadStyleDeclarations(path);
				eventDispatcher.addEventListener(StyleEvent.COMPLETE, onSkinLoaded, false, 0, true);
				eventDispatcher.addEventListener(StyleEvent.ERROR, onSkinLoaded, false, 0, true);
			}


			/**
			 * Skin loaded or load error. </br>
			 * We go on anyway, alerting the user if skin load failed.
			 * */
			protected function onSkinLoaded(event:StyleEvent):void {
				if (event.type == StyleEvent.ERROR) {
					alert(event.errorText, "Skin Load Error");
				}
				// switch to needed tab
				gotoPage(ExternalInterface.call("kmc.mediator.readUrlHash"));
			}


			/**
			 * process flashvars and load KMC uiconf
			 **/
			protected function creationCompleteHandler(event:FlexEvent):void {
				Security.allowDomain('*');
				//TODO . replace when doing white labeling 
				_cm = new ContextMenu();
				_cm.hideBuiltInItems();

				var version:ContextMenuItem = new ContextMenuItem("KMC version:" + VERSION);
				_cm.customItems.push(version);

				//TODO . remove before release
				var flexSpy:ContextMenuItem = new ContextMenuItem("flex spy");
				flexSpy.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onFlexSpy, false, 0, true);
				_cm.customItems.push(flexSpy);

				this.contextMenu = _cm;

				// listen to module requests
				this.addEventListener(KmcNavigationEvent.NAVIGATE, navigateToModule);
				this.addEventListener(KmcErrorEvent.ERROR, onError);
				this.addEventListener(KmcHelpEvent.HELP, showHelp);

				// save flashvars
				var objParam:Object = Application.application.parameters;
				objParam = ObjectHelpers.lowerNoUnderscore(objParam);
				_flashvars = objParam;

				if (objParam.modulespath) {
					_modulesFolder = objParam.modulespath;
				}

				// hook ExternalInterface:
				if (ExternalInterface.available) {
					ExternalInterface.addCallback("gotoPage", gotoPage);
					ExternalInterface.addCallback("alert", alert);
				}

				// create KalturaClient:
				var configuration:KalturaConfig = new KalturaConfig();
				configuration.partnerId = objParam.partnerid;
				configuration.ignoreNull = 1;
				configuration.protocol = objParam.protocol ? objParam.protocol : "http://";
				configuration.domain = KUtils.hostFromCode(objParam.host);
				configuration.srvUrl = objParam.srvurl;
				configuration.clientTag = "kmc";

				_modelLocator.kalturaClient = new KalturaClient(configuration);
				_modelLocator.kalturaClient.ks = objParam.ks;

				// create a module loader:
				_kmcModuleLoader = new KmcModuleLoader();
				_kmcModuleLoader.addEventListener(KmcModuleEvent.MODULE_LOAD_ERROR, onModuleLoadError, false, 0, true);
				_kmcModuleLoader.addEventListener(KmcModuleEvent.MODULE_LOADED, onModuleReady, false, 0, true);

				// load KMC uiconf and roles and permission uiConf  
				var mr:MultiRequest = new MultiRequest();

				var uiconf:UiConfGet = new UiConfGet(objParam.kmcuiconf);
				var uiconf2:UiConfGet = new UiConfGet(objParam.permissionuiconf);
				mr.addEventListener(KalturaEvent.COMPLETE, uiconfLoadHandler, false, 0, true);
				mr.addEventListener(KalturaEvent.FAILED, uiconfFailedHandler, false, 0, true);
				//TODO insert role fetching here too 
				mr.addAction(uiconf);
				mr.addAction(uiconf2);
				_modelLocator.kalturaClient.post(mr);
			}


			/**
			 * show flexspy
			 */
			protected function onFlexSpy(event:*):void {
				FlexSpy.show();
			}


			/**
			 * UiConf failed to load, alert user
			 */
			protected function uiconfFailedHandler(event:KalturaEvent):void {
				var s:String = "KMC.mxml, KMC uiconf load failed: " + event.error.errorMsg;
				alert(s, "Error");
			}


			/**
			 * module failed to load, alert user
			 */
			protected function onModuleLoadError(event:KmcModuleEvent):void {
				var s:String = "KMC.mxml, Module load failed: " + event.errorText;
				alert(s, "Error");
				if (progressbar.source == event.moduleLoader) {
					hideProgressBar();
				}
			}


			/**
			 * Kmc uiConf and RolesAndPermissions loaded. Parse it and load skin and relevant modules.
			 */
			protected function uiconfLoadHandler(event:KalturaEvent):void {
				if (event.data[0].error) {
					alert(event.data[0].error.code, "Error");
					ExternalInterface.call("kmc.utils.expired");
					return;
				}
				
				
				// loaded data
				_uiconf = new XML((event.data[0] as KalturaUiConf).confFile);
				// help url
				_helpBaseUrl = _uiconf.helpPage.text().toString();

				// permissions:
				var partnerPermissionXml:XML = new XML((event.data[1] as KalturaUiConf).confFile); // all permissions
				//TODO insert role fetching here. right now this is just for developing  
				var roleOfCurrentUser:String = "CONTENT_INGEST_BASE,CONTENT_INGEST_UPLOAD,CONTENT_INGEST_BULK_UPLOAD,CONTENT_INGEST_ADD_MIX," +
					// content management
					"CONTENT_MANAGE_BASE,CONTENT_MANAGE_METADATA,CONTENT_MANAGE_ASSIGN_CATEGORIES,CONTENT_MANAGE_THUMBNAIL," +
					"CONTENT_MANAGE_SCHEDULE,CONTENT_MANAGE_ACCESS_CONTROL,CONTENT_MANAGE_CUSTOM_DATA,CONTENT_MANAGE_DELETE," +
					"CONTENT_MANAGE_EMBED_CODE,CONTENT_MANAGE_RECONVERT,CONTENT_MANAGE_ADD_LIVE,CONTENT_MANAGE_EDIT_CATEGORIES," +
					// content moderation
					"CONTENT_MODERATE_BASE,CONTENT_MODERATE_METADATA," +
					// playlist
					"PLAYLIST_BASE,PLAYLIST_ADD,PLAYLIST_UPDATE,PLAYLIST_DELETE,PLAYLIST_EMBED_CODE," +
					// syndication
					"SYNDICATION_BASE,SYNDICATION_ADD,SYNDICATION_UPDATE,SYNDICATION_DELETE," +
					// studio
					"STUDIO_BASE,STUDIO_ADD_UICONF,STUDIO_UPDATE_UICONF,STUDIO_DELETE_UICONF,ADVERTISING_UPDATE_SETTINGS," +
					// account overview
					"ACCOUNT_BASE,ACCOUNT_UPDATE_SETTINGS," +
					// integration settings
					"INTEGRATION_BASE,INTEGRATION_UPDATE_SETTINGS," +
					// access control
					"ACCESS_CONTROL_BASE,ACCESS_CONTROL_ADD,ACCESS_CONTROL_UPDATE,ACCESS_CONTROL_DELETE," +
					//TODO + transcoding settings (screens are not ready)
					"TRANSCODING_BASE,TRANSCODING_ADD,TRANSCODING_UPDATE,TRANSCODING_DELETE," +
					// custom metadata
					"CUSTOM_DATA_PROFILE_BASE,CUSTOM_DATA_PROFILE_ADD,CUSTOM_DATA_PROFILE_UPDATE,CUSTOM_DATA_PROFILE_DELETE," +
					// administration
					"ADMIN_BASE,ADMIN_USER_UPDATE,ADMIN_USER_DELETE,ADMIN_ROLE_ADD,ADMIN_ROLE_UPDATE,ADMIN_ROLE_DELETE";//ADMIN_USER_ADD,
					
				
				permissionManager.init(partnerPermissionXml, roleOfCurrentUser);

				// load skin
				loadSkin(_uiconf.skinPath.toString());
			}


			/**
			 * initialize module: set its size and id, trigger its init method
			 * and switch to its needed subtab.
			 * */
			protected function onModuleReady(event:KmcModuleEvent):void {
				// use the moduleLoader to get module load identifier
				var ml:ModuleLoader = event.moduleLoader;
				var moduleid:String = _kmcModuleLoader.getModuleLoadId(ml);

				// get the loaded module
				var mod:KmcModule = ml.child as KmcModule;
				
				// fix size:
				mod.percentHeight = 100;
				mod.percentWidth = 100;
				mod.id = mod.getModuleName();
				
				// get the uiconf id this module should load:
				var uiconfid:String = _uiconf.modules.module.(@id == moduleid)[0].@uiconf;
				
				// init:
				mod.init(KmcModelLocator.getInstance().kalturaClient, uiconfid, _flashvars, _cm);

				// if we need to start with a module, see if it's this one
				if (_startModule && _startModule.moduleName == mod.id) {
					if (_startModule.subtab) {
						mod.showSubtab(_startModule.subtab, _startModule.extra);
					}
					_startModule = null;
				}
				if (progressbar.source == ml) {
					hideProgressBar();
				}
			}


			/**
			 * Switch to a different KMC module (tab).
			 * Can also include subtab on the new module.
			 * This method can be triggered from JS using ExternalInterface.
			 * @param o		{moduleName:String, subtab:String, extra:Object}
			 * -------------------------------------
			 * @test	requires a loaded module in KMC viewstack
			 * */
			protected function gotoPage(o:Object):void {
				var mInfo:XML;
				if (o) {
					mInfo = _uiconf.modules.module.(@id == o.moduleName)[0];
				}
				else {
					// take the first on the KMC uiconf
					mInfo = _uiconf.modules.module[0];
					o = {moduleName : mInfo.@id.toString()};
				}
				var url:String = _modulesFolder + "/" + mInfo.@path;
				var ml:ModuleLoader = _kmcModuleLoader.loadKmcModule(url, mInfo.@id);
				if (!ml.parent) {
					// this is the first time we load this module.
					// add to the viewstack if needed
					mainViewStack.addChild(ml);
					// show preloader, set its source, bla bla
					progressbar.source = ml;
					progressbar.visible = true;
				}
				mainViewStack.selectedChild = ml;
				_startModule = o;
				if (ml.child && o.subtab) {
					(ml.child as KmcModule).showSubtab(o.subtab, o.extra);
				}

				// tell html
				ExternalInterface.call("kmc.mediator.writeUrlHash", o.moduleName, o.subtab);
				ExternalInterface.call("kmc.mediator.setTab", o.moduleName);
			}


			/**
			 * get the ModuleLoader instance that holds the required module.
			 * mainViewstack holds ModuleLoader instances, not modules.
			 * @param	name (id) of desired module.
			 * @return 	ml holding the given module.
			 * -------------------------------------
			 * @test	requires a loaded KMC module in KMC viewstack
			 * */
			protected function getModuleParent(moduleName:String):ModuleLoader {
				var children:int = mainViewStack.numChildren;
				var ml:ModuleLoader;
				for (var i:int = 0; i < children; i++) {
					ml = mainViewStack.getChildAt(i) as ModuleLoader;
					if (ml.child && (ml.child as KmcModule).getModuleName() == moduleName) {
						break;
					}
				}
				return ml;
			}
			
			protected function hideProgressBar():void {
				progressbar.visible = false;
				progressbar.source = null;
			}


			/**
			 * Trigger module switching
			 * @param e		event holding navigation request info.
			 * */
			protected function navigateToModule(e:KmcNavigationEvent):void {
				var o:Object = {moduleName: e.module, subtab: e.subtab, extra: e.data};
				gotoPage(o);
			}


			/**
			 * Show an error with the text on the error event.
			 * This text should already be localized by the module
			 * which dispatched this event.
			 * */
			private function onError(e:KmcErrorEvent):void {
				alert(e.error, "Error");
			}


			/**
			 * show an alert with the default "ok" button.
			 * @param
			 * */
			private function alert(text:String, header:String = ""):void {
				Alert.show(text, header);
			}


			/**
			 * open the relevant help page on a new browser window,
			 * based on the anchor in the event.
			 * @param e	help request dispatched by anything on the displayList.
			 * */
			private function showHelp(e:KmcHelpEvent):void {
				var url:String = _flashvars.host + _helpBaseUrl + e.anchor;
				navigateToURL(new URLRequest(url), "_blank");
			}
		]]>
	</mx:Script>
	<mx:ViewStack id="mainViewStack" width="100%" height="100%"/>
	<mx:ProgressBar id="progressbar" y="{(height - progressbar.height) / 2}" x="{(width - progressbar.width) / 2}" />
</mx:Application>
