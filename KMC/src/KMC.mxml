<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.kaltura.kmc.view.*" layout="vertical"
				minWidth="955" minHeight="600" creationComplete="creationCompleteHandler(event)" 
				paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" verticalGap="0">
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.commands.MultiRequest;
			import com.kaltura.commands.uiConf.UiConfGet;
			import com.kaltura.config.KalturaConfig;
			import com.kaltura.events.KalturaEvent;
			import com.kaltura.kmc.business.KmcModuleLoader;
			import com.kaltura.kmc.business.PermissionParser;
			import com.kaltura.kmc.events.KmcErrorEvent;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.events.KmcModuleEvent;
			import com.kaltura.kmc.events.KmcNavigationEvent;
			import com.kaltura.kmc.model.KmcModelLocator;
			import com.kaltura.kmc.modules.KmcModule;
			import com.kaltura.utils.KUtils;
			import com.kaltura.utils.ObjectHelpers;
			import com.kaltura.vo.KalturaUiConf;
			
			import com.flexspy.FlexSpy;
			
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.Container;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ModuleEvent;
			import mx.modules.ModuleLoader;

			// ==============================================================================
			// members
			// ==============================================================================
			
			/**
			 * a global access point to the application's flashvars,
			 * all keys are converted to lower case and no underscores.
			 * */
			private var _flashvars:Object;

//			KMC UIConf looks like this:
//			<root>
//				<skinPath>http://www.../kmcSkin.swf</skinPath>
//				<helpPage>http://www.../helpPage.html</helpPage>
//				<modules>
//					<module id="dashboard" uiconf="3451"/>
//					<module id="studio" uiconf="54635"/>
//					<module id="content" uiconf="347864"/>
//					<module id="settings" uiconf="345678"/>
//					<module id="analytics" uiconf="341231"/>
//				</modules>
//			</root> 

			/**
			 * application model
			 * */
			private var _modelLocator:KmcModelLocator = KmcModelLocator.getInstance();

			/**
			 * module loader
			 * */
			private var _kmcModuleLoader:KmcModuleLoader;
			
			/**
			 * path from KMC.swf to module swfs.
			 * */
			private var _modulesFolder:String = "modules";

			/**
			 * KMC UIConf
			 * */
			private var _uiconf:XML;

			// ==============================================================================
			// methods
			// ==============================================================================
			
			/**
			 * process flashvars and load KMC uiconf
			 * */
			protected function creationCompleteHandler(event:FlexEvent):void {
				Security.allowDomain('*');
				
				// listen to module requests
				this.addEventListener(KmcNavigationEvent.NAVIGATE, navigateToModule);
				this.addEventListener(KmcErrorEvent.ERROR, showError);
				this.addEventListener(KmcHelpEvent.HELP, showHelp);

				// save flashvars
				var objParam:Object = Application.application.parameters;
				objParam = ObjectHelpers.lowerNoUnderscore(objParam);
				_flashvars = objParam;

				if (objParam.modulespath) {
					_modulesFolder = objParam.modulespath;
				}
				
				// hook ExternalInterface:
				if (ExternalInterface.available) {
					ExternalInterface.addCallback("gotoPage", gotoPage);
				}

				// create KalturaClient:
				var configuration:KalturaConfig = new KalturaConfig();
				configuration.partnerId = objParam.partnerid;
				configuration.ignoreNull = 1;
				configuration.protocol = objParam.protocol ? objParam.protocol : "http://";
				configuration.domain = KUtils.hostFromCode(objParam.host);
				configuration.srvUrl = objParam.srvurl;
				configuration.clientTag = "kmc";

				_modelLocator.kalturaClient = new KalturaClient(configuration);
				_modelLocator.kalturaClient.ks = objParam.ks;
				
				// create a module loader:
				_kmcModuleLoader = new KmcModuleLoader();
				_kmcModuleLoader.addEventListener(KmcModuleEvent.MODULE_LOAD_ERROR, onModuleLoadError);
				_kmcModuleLoader.addEventListener(KmcModuleEvent.MODULE_LOADED, onModuleReady);

				// load KMC uiconf and roles and permission uiConf  
				var mr:MultiRequest = new MultiRequest();
				
				var uiconf:UiConfGet = new UiConfGet(objParam.kmcuiconf);
				var uiconf2:UiConfGet = new UiConfGet(objParam.permissionuiconf);
				mr.addEventListener(KalturaEvent.COMPLETE, uiconfLoadHandler);
				mr.addEventListener(KalturaEvent.FAILED, uiconfFailedHandler);
				mr.addAction(uiconf);
				mr.addAction(uiconf2);
				_modelLocator.kalturaClient.post(mr);
			}


			/**
			 * UiConf failed to load, alert user
			 */
			protected function uiconfFailedHandler(event:KalturaEvent):void {
				throw new Error("KMC.mxml, KMC uiconf load failed: " + event.error.errorMsg);
			}


			/**
			 * module failed to load, alert user
			 */
			protected function onModuleLoadError(event:KmcModuleEvent):void {
				throw new Error("KMC.mxml, Module load failed: " + event.errorText);
			}


			/**
			 * Kmc uiConf loaded. Parse it and load skin and relevant modules.
			 */
			protected function uiconfLoadHandler(event:KalturaEvent):void {
				
				
				_uiconf = new XML((event.data[0] as KalturaUiConf).confFile);
				//TODO load skin
				
				//TODO - insert the getting of all the partners list and users list + substract 
				var permissionXml:XML = new XML((event.data[1] as KalturaUiConf).confFile);
				var parser:PermissionParser = new PermissionParser();
				_modelLocator.permissionManager.permissions = parser.parsePermission(permissionXml);
				
				var hideTabsArray:Array = parser.hiddenTabs();
				
				// load modules :
				var moduleList:XMLList = _uiconf.modules.module;
				var total:int = moduleList.length();
				var mInfo:XML;
				for (var i:int = 0; i < total; i++) {
					mInfo = moduleList[i];
					var url:String = _modulesFolder + "/" + mInfo.@id + ".swf";
					var ml:ModuleLoader = _kmcModuleLoader.loadKmcModule(url, mInfo.@id);
					mainViewStack.addChild(ml);
				}
			}


			/**
			 * initialize module
			 * */
			protected function onModuleReady(event:KmcModuleEvent):void {
				// the moduleLoader
				var ml:ModuleLoader = event.moduleLoader;
				
				// the loaded module's id:
				var moduleid:String = _kmcModuleLoader.getModuleId(ml);
				
				// a list of all modules:
				var moduleList:XMLList = _uiconf.modules.module;
				
				// the loaded module:
				var mod:KmcModule = ml.child as KmcModule;
				mod.percentHeight = 100;
				mod.percentWidth = 100;
				mod.id = moduleid;
				
				// the uiconf id this module should load:
				var uiconfid:String = moduleList.(@id == moduleid)[0].@uiconf;
				mod.init(KmcModelLocator.getInstance().kalturaClient, uiconfid, _flashvars);
			}


			/**
			 * Switch to a different KMC module (tab).
			 * Can also include subtab on the new module.
			 * This method can be triggered from JS using ExternalInterface.
			 * */
			private function gotoPage(moduleName:String, subtab:String, ...args):void {
				trace("KMC going to", moduleName, subtab != null ? "> " + subtab : "");
				var ml:ModuleLoader = getModuleParent(moduleName);
				if (ml) {
					mainViewStack.selectedChild = ml;
				}
			}
			
			
			/**
			 * get the ModuleLoader instance that holds the required module.
			 * mainViewstack holds ModuleLoader instances, not modules.
			 * @param	name (id) of desired module.
			 * @return 	ml holding the given module. 
			 * */
			private function getModuleParent(moduleName:String):ModuleLoader {
				var children:int = mainViewStack.numChildren;
				var ml:ModuleLoader;
				for (var i:int = 0; i<children; i++) {
					ml = mainViewStack.getChildAt(i) as ModuleLoader;
					if ((ml.child as KmcModule).getModuleName() == moduleName) {
						break;
					}
				}
				return ml;
			}
			

			/**
			 * Trigger module switching
			 * @param e		event holding navigation request info.
			 * */
			private function navigateToModule(e:KmcNavigationEvent):void {
				gotoPage(e.module, e.subtab);
			}
			
			
			/**
			 * Show an error with the text on the error event.
			 * This text should alresy be localized by the module
			 * which dispatched this event.
			 * */
			private function showError(e:KmcErrorEvent):void {
				Alert.show(e.error);
			}
			
			
			/**
			 * open the relevant help page, based on the anchor in the event.
			 * */
			private function showHelp(e:KmcHelpEvent):void {
				//TODO implement showHelp
			}

			protected function combobox1_changeHandler(event:ListEvent):void
			{
				gotoPage(switchCombo.selectedLabel, null);
			}

		]]>
	</mx:Script>
	<mx:HBox height="32">
		<mx:ComboBox id="switchCombo" change="combobox1_changeHandler(event)">
			<mx:dataProvider>
				<mx:String>dashboard</mx:String>
				<mx:String>content</mx:String>
				<mx:String>account</mx:String>
				<mx:String>analytics</mx:String>
				<mx:String>studio</mx:String>
			</mx:dataProvider>
		</mx:ComboBox>
		<mx:Button label="FlexSpy" click="FlexSpy.show()" />
	</mx:HBox>
	<mx:ViewStack id="mainViewStack" width="100%" height="100%"/>
</mx:Application>
