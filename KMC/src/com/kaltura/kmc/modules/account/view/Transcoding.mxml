<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		 implements="com.kaltura.kmc.modules.account.view.interfaces.IAccountPanel" 
		 xmlns:conversion="com.kaltura.kmc.modules.account.view.windows.conversion.*"
		 creationComplete="creationCompleteHandler(event)" xmlns:controls="com.kaltura.controls.*">
	<mx:states>
		<mx:State name="{Transcoding.MODE_ADVANCED_PROFILE}">
			<mx:SetProperty target="{titleText}" name="htmlText"
							value="{resourceManager.getString('account', 'transcodingProfiles')}"/>
			<mx:SetProperty target="{introText}" name="text"
							value="{resourceManager.getString('account', 'transcodingSettingsAdvancedModeIntroText')}"/>
		</mx:State>
		<mx:State name="{Transcoding.MODE_LIVE_PROFILE}">
			<mx:SetProperty target="{titleText}" name="htmlText"
							value="{resourceManager.getString('account', 'transcodingProfiles')}"/>
			<mx:SetProperty target="{introText}" name="text"
							value="{resourceManager.getString('account', 'transcodingSettingsAdvancedModeIntroText')}"/>
		</mx:State>
	</mx:states>

	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.kmc.modules.account.control.events.ConversionSettingsEvent;
			import com.kaltura.kmc.modules.account.events.TranscodingEvent;
			import com.kaltura.kmc.modules.account.vo.ConversionProfileVO;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.vo.FlavorVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			
			/**
			 * name of the default (simple) window state
			 * */
			public static const MODE_DEFAULT_PROFILE:String = "defaultModeState";
			
			/**
			 * name of the advanced window state
			 * */
			public static const MODE_ADVANCED_PROFILE:String = "advanceModeState";
			
			/**
			 * name of the live profiles window state
			 * */
			public static const MODE_LIVE_PROFILE:String = "liveModeState";
			
			

			private var _initRequested:Boolean;
			
			private var _flavorParamData:ArrayCollection;


			[Bindable]
			public function set flavorParamData(value:ArrayCollection):void {
				_flavorParamData = value;
			}


			public function get flavorParamData():ArrayCollection {
				return _flavorParamData;
			}

			[Bindable]
			/**
			 * total number of conversion profiles (for pager)
			 * */
			public var totalProfiles:int;

			[Bindable]
			public var allFlavorsSelected:Boolean = false;

			
			
			[ArrayElementType("com.kaltura.kmc.modules.account.vo.ConversionProfileVO")]
			private var _conversionData:ArrayCollection;

			
			[Bindable]
			public function get conversionProfs():ArrayCollection {
				return _conversionData;
			}


			public function set conversionProfs(conversionData:ArrayCollection):void {
				_conversionData = conversionData;
				setData();
			}



			/**
			 * get data
			 * */
			public function init():void {
				if (advancedMode) {
					advancedMode.listProfiles();
				}
				else {
					_initRequested = true;
				}
			}



			private function setData():void {
				for each (var profile:ConversionProfileVO in _conversionData) {
					if (profile.profile.isDefault) {
						simpleTable.cProfile = profile.clone();
					}

					for each (var flavor:FlavorVO in _flavorParamData) {
						flavor.addEventListener(FlavorVO.SELECTED_CHANGED_EVENT, updateFlavorsStatus);
					}
				}

				_flavorParamData.refresh();
			}



			private function updateFlavorsStatus(event:Event):void {
				var numSelected:int = 0;
				for each (var flavor:FlavorVO in _flavorParamData) {
					numSelected += flavor.selected ? 1 : 0;
				}

				allFlavorsSelected = (_flavorParamData.length == numSelected);
			}



			private function onChangeState(event:Event):void {
				if (event is TranscodingEvent) {
					// came from advanced/live
					switch ((event as TranscodingEvent).data) {
						case Transcoding.MODE_DEFAULT_PROFILE:
							currentState = null;
							viewStack.selectedIndex = 0;
							break;
						case Transcoding.MODE_ADVANCED_PROFILE:
							currentState = Transcoding.MODE_ADVANCED_PROFILE;
							viewStack.selectedIndex = 1;
							break;
						case Transcoding.MODE_LIVE_PROFILE:
							currentState = Transcoding.MODE_LIVE_PROFILE;
							viewStack.selectedIndex = 2;
							break;
					}
				}
				else {
					// came from simple mode
					currentState = Transcoding.MODE_ADVANCED_PROFILE;
					viewStack.selectedIndex = 1;
				}
				
			}
			


			/**
			 * save the default conversion profile
			 * */
			private function onSaveProfileClick(event:Event):void {
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.ACCOUNT, KalturaStatsKmcEventType.ACCOUNT_SAVE_TRANSCODING_SETTINGS, "Account>Save transcoding Settings");
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.ACCOUNT_SAVE_DEF_TRANSCODING_PROF, GoogleAnalyticsConsts.ACCOUNT);

				if (simpleTable.isFlavorsSelected() && (simpleTable.cProfile.profile.flavorParamsIds != null)) {
					var up:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.UPDATE_CONVERSION_PROFILE, false, simpleTable.cProfile);
					up.dispatch();
				}
				else {
					Alert.show(resourceManager.getString('account', 'oneFlvorSelection'), resourceManager.getString('account', 'missingFlavorTitle'));
				}
			}



			public function isChanged():Boolean {
				return false;
			}


			public function undo():void {
			}


			public function saveChanges():void {
			}


			public function resetClonedData():void {
			}


			protected function creationCompleteHandler(event:FlexEvent):void {
				if (_initRequested) {
					// re-trigger init()
					init();
				}
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
			}

		]]>
	</mx:Script>
	<mx:Label styleName="filterTitleHeader" width="100%" id="titleText"
			  htmlText="{resourceManager.getString('account','defaultTranscodingFlavors')}"/>
	<mx:HBox id="hbox1" width="100%" styleName="featureDescriptionTitleBox" verticalAlign="middle" paddingRight="10"
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Text width="100%" selectable="false" id="introText"
				 htmlText="{resourceManager.getString('account','transcodingSettingsSimpleModeIntroText')}"
				 styleName="pageDescription"/>
	</mx:HBox>

	<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">
		<!-- simple mode -->
		<mx:VBox width="100%" verticalGap="0">
			<conversion:ConversionSettingsTable id="simpleTable" height="100%" allSelected="{allFlavorsSelected}"
												dataProvider="{flavorParamData}" creationComplete="setData()"/>
			<mx:HBox width="100%" styleName="DataGridActions">
				<mx:LinkButton id="advancedModeBtn"
							   label="{resourceManager.getString('account','switchToAdvanceMode')}"
							   click="onChangeState(event)" styleName="switchModesLinkButtonStyle"/>
				
				<mx:Spacer width="40%" />
				<mx:Button id="saveButton" label="{resourceManager.getString('account','saveChangesButton')}"
							   useHandCursor="true" buttonMode="true" click="onSaveProfileClick(event)"/>
				<mx:Spacer width="60%" />
			</mx:HBox>
		</mx:VBox>

		<!-- advanced mode -->
		<conversion:AdvancedMode id="advancedMode" width="100%" height="100%" 
								 conversionData="{conversionProfs}" totalProfiles="{totalProfiles}"
								 showAdvancedButton="false" showLiveButton="true" changeState="onChangeState(event)"/>

		<!-- advanced mode -->
		<conversion:AdvancedMode id="liveMode" width="100%" height="100%" 
								 conversionData="{conversionProfs}" totalProfiles="{totalProfiles}"
								 showAdvancedButton="true" showLiveButton="false" changeState="onChangeState(event)"/>
	</mx:ViewStack>
</mx:VBox>
