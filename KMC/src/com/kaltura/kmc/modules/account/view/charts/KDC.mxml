<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
	creationComplete="{this.titleTextField.styleName = 'pageTitle' }"
	title="{resourceManager.getString('kmc','monthlyBW')}" 
	backgroundColor="#f4f4f5" borderColor="#f4f4f5">
	<mx:Script>
		<![CDATA[
			import com.kaltura.events.KalturaEvent;
			import com.kaltura.kmc.modules.account.model.KMCModelLocator;
			import mx.rpc.events.FaultEvent;
			import com.kaltura.kmc.modules.account.events.UsageGraphEvent;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.HitData;
			import mx.charts.chartClasses.AxisBase;
			import mx.charts.DateTimeAxis;
			import mx.controls.Alert;
			import com.kaltura.kmc.view.Usage;
			import mx.charts.series.LineSeries;
			import mx.charts.series.BarSeries;
			import mx.charts.series.ColumnSeries;
			import mx.graphics.Stroke;
			import mx.graphics.SolidColor;
			import mx.charts.CategoryAxis;
			import mx.charts.LinearAxis;
			import mx.rpc.events.ResultEvent;
			import mx.charts.GridLines;
			import mx.charts.chartClasses.Series;
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.charts.BarChart;
			import mx.charts.ColumnChart;
			import mx.charts.LineChart;
			import mx.charts.chartClasses.CartesianChart;
			
			public static const INT2MONTHS_MAP : Object = { 1:resourceManager.getString('account', 'January') , 
												   			2:resourceManager.getString('account', 'February') ,
															3:resourceManager.getString('account', 'March') ,
															4:resourceManager.getString('account', 'April') ,
															5:resourceManager.getString('account', 'May') ,
															6:resourceManager.getString('account', 'June') ,
															7:resourceManager.getString('account', 'July') ,
															8:resourceManager.getString('account', 'August') ,
															9:resourceManager.getString('account', 'September') ,
															10:resourceManager.getString('account', 'October') ,
															11:resourceManager.getString('account', 'November') ,
															12:resourceManager.getString('account', 'December') 
													  };	
													  
			public static const MONTHS2INT_MAP : Object = { resourceManager.getString('account', 'January'):1, 
												   			resourceManager.getString('account', 'February'):2,
															resourceManager.getString('account', 'March'):3,
															resourceManager.getString('account', 'April'):4,
															resourceManager.getString('account', 'May'):5,
															resourceManager.getString('account', 'June'):6,
															resourceManager.getString('account', 'July'):7,
															resourceManager.getString('account', 'August'):8,
															resourceManager.getString('account', 'September'):9,
															resourceManager.getString('account', 'October'):10,
															resourceManager.getString('account', 'November'):11,
															resourceManager.getString('account', 'December'):12
													  };	
													  
			public static const Y_UNITS : String = "mb";
			public static const YEARS : String = "years";
			public static const DAYS : String = "days";
			public static const MONTHS : String = "months";
			
			private var _currentTimeFrame : String = MONTHS;
			private var _currentResolution : String = DAYS;
		
			private var _today : Date = new Date();
			
			private var _selectedYear : String = _today.fullYear.toString();
			private var _selectedMonth : String = String(_today.month + 1);
			private var _currentChartClass : Class = ColumnChart;
			private var _currentChartSeries : Class = ColumnSeries;
			private var _srvParams : Object = null;
			private var _chart : CartesianChart = null;
			private var _loadedXML : XML = null;
			
			private var _totalBWSoFar : Number = 0;
			private var _totalPercentSoFar : Number = 0;
			private var _hostingGB : Number = 0;
			
			[Bindable] private var _getPartnerUsageURL : String = "http://www.kaltura.com/index.php/partnerservices2/getpartnerusage";
			[Bindable] private var _chartDataProvider : ArrayCollection = null;
			
			[Bindable] public var createdYear : uint;
			[Bindable] public var createdMonth : uint;
			[Bindable] public var createdDay : uint;
			
			public var KDCReady : Boolean = false;
			//----------------------------------------------------------
		    //Private functions
		    	
			private function setChart( chartClass : Class ):void
		    {     
		    	if(_chart)
		    	{
		    		if(this.contains(_chart))
		    			this.removeChild( _chart );
		    		
		    		_chart = null;
		    	}
		
		        _chart = new chartClass();
		        _chart.percentWidth = 100;
		        _chart.percentHeight = 100;
		        _chart.addEventListener( ChartItemEvent.ITEM_CLICK , onChartItemClick );
		        this.addChildAt( _chart , this.getChildIndex(topControls) + 1 ); 
		    }
		    
		    private function onChartItemClick( event : ChartItemEvent ) : void
		    {
		    	//a workaround to solve the event itemClick type error
		    	event.stopImmediatePropagation();
		    }
		    
			private function setChartSettings():void
		    {
		    	_chart.showDataTips = _loadedXML.@showdatatips == "false" ? false : true; 
		    	_chart.dataTipFunction = dtFunc;
	            _chart.mouseSensitivity = _loadedXML.hasOwnProperty('mousesensitivity') ? _loadedXML.@mousesensitivity : 40;
	        	_chart.dataTipMode = _loadedXML.@datatipmode;
	        	
	        	if(_loadedXML.@lineshadow != "true")
	        	{
	        		_chart.seriesFilters = [];
	        	}
	
	        	if(_loadedXML.@border == "false")
		        {
		        	_chart.setStyle("borderStyle","solid");
		            _chart.setStyle("paddingBottom",0);
		        	_chart.setStyle("paddingTop",0);
		        	_chart.setStyle("gutterBottom ",0);
		       		_chart.setStyle("gutterTop",0);
		        }	 
		        
		        if( _loadedXML.hasOwnProperty('bordercolor') )
		        	 this.setStyle("borderColor",_loadedXML.@bordercolor);
        	 
		        if( _loadedXML.hasOwnProperty('backgroundcolor') )
		        	 this.setStyle("backgroundColor",_loadedXML.@backgroundcolor);

				if(_loadedXML.hasOwnProperty('caption'))
		       		this.title = _loadedXML.@caption;
		    }
		    
		    private function createSeries( seriesClass : Class ):void
		    {
		     	for each(var prop:XML in _loadedXML.line)
		     	{
		     		addSeries( seriesClass , prop);
		     	}
		    }
		    
		    private function addSeries( seriesClass : Class , prop : XML ) : void
		    {
		     	 var ls: Series = new seriesClass();
		     	
		     	 if(_loadedXML.hasOwnProperty('linetype'))
		     	 	ls.setStyle("form",prop.@linetype);
		     	 else
		     	 	ls.setStyle("form","curve");
		     	 	
		     	 ls["yField"] = "y"; //yField is a class spasific attribute so it must be dynamic
	     	     ls["xField"] = "x"; //xField is a class spasific attribute so it must be dynamic
	             
	             if(_loadedXML.hasOwnProperty('name'))
	             	ls.displayName = prop.@name;
	             else
	             	ls.displayName = _currentResolution;
	
	             var s:Stroke = new Stroke(prop.@color,prop.@strokewidth);
	             ls.setStyle("lineStroke",s);
	             
				 var arr : Array = new Array();
				 var tempArr : Array = prop.children().split(';');
				 tempArr = tempArr.slice( 0 , tempArr.length - 1);
				 for(var i:int=0 ; i< tempArr.length ; i++)
				 {
				 	var pArr : Array = tempArr[i].split(',');
				 	var point : Object = {"x":pArr[0],"y":pArr[1]};
				 	arr.push( point );
				 } 
	             ls.dataProvider = new ArrayCollection( arr );
	             
			     var currentSeries:Array; 
		         currentSeries = _chart.series;
		         currentSeries.push(ls);
		         _chart.series = currentSeries;
		    }
		    
		   	private function createAxis( dataProvider:XMLList ):void
		    {
		     	if(_loadedXML.@customxaxis != "false")
		     	{
		     		var xAx:DateTimeAxis = new DateTimeAxis();

		     		xAx.dataUnits = _currentResolution;
		     		xAx.labelUnits = _currentResolution;
		     		xAx.parseFunction = xAxParseFunction;
		     		
		     		if( _loadedXML.hasOwnProperty('intervalx') )
		     			xAx.interval = _loadedXML.@intervalx;
		     		
		     		/*else
		     			xAx.interval = 1;*/
		     		
		     		if( _loadedXML.hasOwnProperty('xaxisname') )
		     			xAx.title = _loadedXML.@xaxisname;
		     		else
		     			xAx.title = _currentResolution;
		     		
		     		_chart.horizontalAxis = xAx;
		     		
				 /* xAx = new CategoryAxis();
		     		xAx.dataProvider = dataProvider;
		     		xAx.categoryField = "x";
		     		xAx.title = _loadedXML.@xaxisname;
		     		_chart.horizontalAxis = xAx;

			       	xAx  = new LinearAxis();
			        xAx.interval = _loadedXML.@intervalx;
			        xAx.minimum = _loadedXML.@minimumx;
			        xAx.maximum = _loadedXML.@maximumx;
			        xAx.title = _loadedXML.@xaxisname;
			        _lineChart.horizontalAxis = xAx; */

			     } 
			     
			     if(_loadedXML.@customyaxis != "false")
			     {
			        var yAx:LinearAxis = new LinearAxis();
			        
			        if(_loadedXML.hasOwnProperty('intervaly'))
			       		yAx.interval = _loadedXML.@intervaly;
			       		
			       	if(_loadedXML.hasOwnProperty('minimumy'))
			        	yAx.minimum = _loadedXML.@minimumy;
			        	
			        if(_loadedXML.hasOwnProperty('maximumy'))
			        	yAx.maximum = _loadedXML.@maximumy;
			       
			        if( _loadedXML.hasOwnProperty('yaxisname') )
			        	yAx.title = _loadedXML.@yaxisname;
			        else
			        	yAx.title = Y_UNITS;
			        	
			        _chart.verticalAxis = yAx;
			     }    
		    }
		    
			private function addGridLines():void 
		    {
		        var bge:GridLines = new GridLines();
				
				bge.setStyle("direction",_loadedXML.@gridlinesdirection)
				
				if(_loadedXML.@customgridlines == "true")
				{	
			        var s:Stroke = new Stroke(_loadedXML.@horizontalstrokecolor, _loadedXML.@horizontalstrokesize);
			        bge.setStyle("horizontalStroke", s);
			
			        var f:SolidColor = new SolidColor(_loadedXML.@horizontalfillcolor, _loadedXML.@horizontalfillsize);
			        bge.setStyle("horizontalFill",f);
			
			        var f2:SolidColor = new SolidColor(_loadedXML.@horizontalalternatefillcolor,_loadedXML.@horizontalalternatefillsize);
			        bge.setStyle("horizontalAlternateFill",f2);
			        
			        var s2:Stroke = new Stroke(_loadedXML.@verticalstrokecolor, _loadedXML.@verticalstrokesize);
			        bge.setStyle("verticalStroke", s2);
			
			        var f3:SolidColor = new SolidColor(_loadedXML.@verticalfillcolor, _loadedXML.@verticalfillsize);
			        bge.setStyle("verticalFill",f3);
			
			        var f4:SolidColor = new SolidColor(_loadedXML.@verticalalternatefillcolor,_loadedXML.@verticalalternatefillsize);
			        bge.setStyle("verticalAlternateFill",f4);
			 	 }
		
		        _chart.backgroundElements = [bge];
	     	}
	     	
	     	private function createChart() : void
	     	{
	     		setChart( _currentChartClass );
	      		setChartSettings();
	      		createAxis( _loadedXML.line )
	      		addGridLines();
	      		createSeries( _currentChartSeries ); ;
	     	}
	     	
	     	
	     	private function onSrvFlt(event:KalturaEvent):void
	     	{
	     		Alert.show(event.data.message);
	     	}
	     	
	     	private function onSrvRes(event:KalturaEvent):void
	     	{
	     		if(!event.data.success)
	     		{
	     			Alert.show("Error getting Usages Graph Data");
	     			return;
	     		}
	     		
	     		 _loadedXML = XML(event.data.data.usageGraph);
	     		 
	     		 _totalBWSoFar = event.data.data.usageGB;
	     		 var eventObj:Event = new Event("totalBWSoFarChanged");
        		 dispatchEvent(eventObj);
        		 
	     		 _totalPercentSoFar = event.data.data.Percent;
	     		 eventObj = new Event("totalPercentSoFarChanged");
        		 dispatchEvent(eventObj);
        		 
        		 _hostingGB = event.data.data.hostingGB;
        		 eventObj = new Event("hostingGBChanged");
        		 dispatchEvent(eventObj);
        		 
        		 
        		 dispatchEvent( new Event( "statsLoaded" ) );
	     		 createChart();
	     		 
	     		 
	     	}

	     	private function onTimeFrameChange() : void
	     	{
	     		switch(timeFrameTBB.selectedIndex)
	     		{
	     			case 0: 
	     				this.title = resourceManager.getString('account','monthlyBW');
 						_currentTimeFrame = MONTHS;
	     				_currentResolution = DAYS;
	     			break;
	     			case 1: 
	     				this.title = resourceManager.getString('account','yearlyBW');
	     				_currentTimeFrame = YEARS;
	     				_currentResolution = MONTHS;
	     			break;
	     		}
	     		
	     		setCBDataProvider();
	     		onCBChange()
	     		loadData();
	     	}
	     	
	     	private function setCBDataProvider() : void
	     	{
	     		var arrColl : ArrayCollection = new ArrayCollection();
		
	     		var years : int = _today.fullYear - createdYear; 
		     	var months : int = _today.month + 1 - createdMonth; 
		     	var totalMonth : int = months + years * 12; 
		     	
		     	var i:int=0;
		     	
	     		if( _currentTimeFrame == YEARS )
	     		{
		     		for( i=0 ; i <= years ; i++)
		     		{
		     			arrColl.addItem( _today.fullYear - i );
		     		}
	     		}
	     		else if( _currentTimeFrame == MONTHS )
	     		{
	     			var year : uint = _today.fullYear;
	     			var month : uint = _today.month + 1;
		     		
		     		for( i=0 ; i <= totalMonth ; i++)
		     		{
		     			arrColl.addItem( INT2MONTHS_MAP[month] +" "+  year );
		     			if(month>1)
		     				--month;
		     			else
		     			{
		     				month = 12;
		     				--year;
		     			}	
		     		}
	     		}
	     		
	     		cb.dataProvider = arrColl;
	     	}
	     	
	     	private function onCBChange() : void
	     	{
	     		if(cb.selectedItem)
	     		{
		     		if(_currentTimeFrame == MONTHS)
		     		{
			     		var dateArr : Array = cb.selectedItem.split(" ");
			     		_selectedYear = dateArr[1];
				    	_selectedMonth = MONTHS2INT_MAP[dateArr[0]];
		     		}
		     		else if( _currentTimeFrame == YEARS)
		     		{
		     			_selectedYear = cb.selectedItem.toString();
		     		} 
	     		}
	     		
	     		loadData();
	     	}
	     				    
		    public function loadData() : void
		    {
		        _srvParams.month = _selectedMonth ;
		    	_srvParams.year = _selectedYear;
		    	_srvParams.resolution = _currentResolution;
		    /*	getPartnerUsage.send( _srvParams ); */
		    	
		    	var usageGraphEvent : UsageGraphEvent = new UsageGraphEvent( UsageGraphEvent.USAGE_GRAPH );
		    	usageGraphEvent.data = _srvParams;
				usageGraphEvent.dispatch();
		    } 
		    
     		private function dtFunc(hd:HitData):String 
     		{
     			if(_currentResolution == MONTHS)
        			return INT2MONTHS_MAP[hd.item.x]+"\n" + hd.item.y +" "+ Y_UNITS;
        		else
        			return _selectedMonth +"/"+ hd.item.x +"/"+ _selectedYear + "\n" + hd.item.y +" "+ Y_UNITS;
	     	}
	     	
	     	private function xAxParseFunction(x:String):Date 
	     	{ 
	     		if(_currentResolution == MONTHS)
	     			return new Date( _selectedYear ,(Number(x)-1).toString() );
	     		else
                	return new Date(_selectedYear , (Number(_selectedMonth)-1).toString() , x);
            }
	     	
	     	//----------------------------------------------------------
		    //Public function
		    public function init() : void
		    {
		    	setCBDataProvider();
		    	
		    	//
		    	KMCModelLocator.getInstance().addEventListener(KMCModelLocator.USAGE_GRAPH_RESULT, onSrvRes);
		    	KMCModelLocator.getInstance().addEventListener(KMCModelLocator.USAGE_GRAPH_FAULT, onSrvFlt);
		    	
		    	loadData();
		    }

		    //----------------------------------------------------------
		    //Setters & Getters
		    public function set getPartnerUsageURL( url : String) : void
		    {
		    	if(url == _getPartnerUsageURL)
		    		return;
		    		
		    	_getPartnerUsageURL = url;
		    }
		    
		    public function get getPartnerUsageURL() : String
		    {
		    	return _getPartnerUsageURL;
		    }
		    
		    public function set srvParams( params : Object) : void
		    {
		    	_srvParams = params;
		    }
		    
		    public function get srvParams() : Object
		    {
		    	return _srvParams;
		    }
		    
		    public function set chartDataProvider( arrCol : ArrayCollection) : void
		    {
		    	_chartDataProvider = arrCol;
		    }
		    
		    public function get chartDataProvider() : ArrayCollection
		    {
		    	return _chartDataProvider;
		    }
		    
		    [Bindable(event="totalBWSoFarChanged")]
		    public function get totalBWSoFar() : Number
		    {
		    	return _totalBWSoFar;
		    }
		    
		    [Bindable(event="totalPercentSoFarChanged")]
		    public function get totalPercentSoFar() : Number
		    {
		    	return _totalPercentSoFar;
		    }
		    		    
		   [Bindable(event="hostingGBChanged")]
		    public function get hostingGB() : Number
		    {
		    	return _hostingGB;
		    }
		    
		]]>
	</mx:Script>
	
	<mx:Metadata>
		 [Event(name="totalBWSoFarChanged", type="flash.events.Event")]
		 [Event(name="totalPercentSoFarChanged", type="flash.events.Event")]
		 [Event(name="hostingGBChanged", type="flash.events.Event")]
		 [Event(name="statsLoaded", type="flash.events.Event")]
	</mx:Metadata>
	
	<!--<mx:HTTPService id="getPartnerUsage" 
		url="{_getPartnerUsageURL}"
		method="POST" showBusyCursor="true"
		resultFormat="e4x" 
		result="onSrvRes( event )"
		fault="onSrvFlt(event)"/>-->
	
	<mx:HBox id="topControls" width="100%" styleName="topPanelControls" >
		
		<mx:ToggleButtonBar id="timeFrameTBB" itemClick="onTimeFrameChange()" selectedIndex="0" buttonMode="true">
			<mx:dataProvider>
	            <mx:String>{resourceManager.getString('account','viewMonthly')}</mx:String>
	            <mx:String>{resourceManager.getString('account','viewYearly')}</mx:String>
	        </mx:dataProvider>
		</mx:ToggleButtonBar>
		<mx:ComboBox id="cb" width="140" change="onCBChange()"/>

	    <mx:Spacer width="100%" />
	    
		<mx:Button styleName="barChartIcon"
			click="{_currentChartClass = ColumnChart; _currentChartSeries = ColumnSeries; createChart()}" buttonMode="true"/>
		<mx:Button  styleName="lineChartIcon" 
			click="{_currentChartClass = LineChart; _currentChartSeries = LineSeries; createChart()}" buttonMode="true" />
	</mx:HBox>
</mx:Panel>
