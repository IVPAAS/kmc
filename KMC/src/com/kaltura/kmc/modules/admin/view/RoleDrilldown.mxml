<?xml version="1.0" encoding="utf-8"?>
<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.kaltura.containers.*"
							verticalScrollPolicy="off" height="540" width="400" showCloseButton="true"
							close="closeHandler(event)" layout="vertical"
							creationComplete="creationCompleteHandler(event)">
	<mx:Metadata>
		[Event(name="save", type="flash.events.Event")] 
		[Event(name="close", type="flash.events.Event")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.business.PermissionManager;
			import com.kaltura.kmc.modules.admin.business.PermissionGroupManager;
			import com.kaltura.kmc.modules.admin.model.DrilldownMode;
			import com.kaltura.kmc.modules.admin.stubs.vo.KalturaRole;
			import com.kaltura.utils.ObjectUtil;
			
			import mx.binding.utils.BindingUtils;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.controls.LinkButton;
			import mx.controls.Spacer;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;

			/**
			 * All PermissionGroupManagers array 
			 */
			private var allPermissionGroupManagers:Array = new Array();
			
			/**
			 * All checkboxes array 
			 */
			private var allCheckboxes:Array = new Array();
			
			/**
			 * partner's permissions uiconf
			 * */
			protected var _formData:XML;



			/**
			 * value of the type property for the <code>save</code> event
			 * */
			public static const SAVE:String = "rdd_save";

			/**
			 * value of the type property for the <code>save</code> event
			 * */
			public static const CLOSE:String = "rdd_close";

			/**
			 * creationComplete event occured in the past?
			 * */
			private var _ready:Boolean;

			/**
			 * @copy #role
			 * */
			private var _role:KalturaRole;


			[Bindable]
			/**
			 * make changes to this user, so we can revert easily.
			 * */
			private var _undoRole:KalturaRole;


			/**
			 * @copy #mode
			 * */
			private var _mode:String = DrilldownMode.ADD;



			protected function creationCompleteHandler(event:FlexEvent):void {
				_ready = true;
				// re-trigger the mode setter
				setMode(_mode);

				var groups:XMLList = _formData..permissionGroup;
				//TODO + get partner permissions and remove any features current partner doesn't have.
				for each (var group:XML in groups) {
					myForm.addChild(buildGroup(group));
				}
				PermissionManager.getInstance().applyAllAttributes(this, "roleDrilldown");
				
				//in edit mode - fill checkboxes This is a test and will need to get the date from the server 
				var temp:String = "CONTENT_INGEST_BULK_UPLOAD,CONTENT_MANAGE_BASE,CONTENT_MANAGE_METADATA,CONTENT_MANAGE_ASSIGN_CATEGORIES,CONTENT_MANAGE_THUMBNAIL,CONTENT_MANAGE_SCHEDULE,CONTENT_MANAGE_ACCESS_CONTROL,CONTENT_MANAGE_CUSTOM_DATA,CONTENT_MANAGE_DELETE,CONTENT_MANAGE_EMBED_CODE,CONTENT_MANAGE_RECONVERT,CONTENT_MANAGE_EDIT_CATEGORIES,CONTENT_MODERATE_BASE,PLAYLIST_BASE,PLAYLIST_ADD,PLAYLIST_UPDATE,PLAYLIST_DELETE,PLAYLIST_EMBED_CODE,STUDIO_BASE,STUDIO_UPDATE_UICONF,STUDIO_SELECT_CONTENT,ADVERTISING_UPDATE_SETTINGS,INTEGRATION_BASE,INTEGRATION_UPDATE_SETTINGS";
				fillPermissions(temp); 
				var hidePermissions:String = "a,b,c";
				disablePermission();
			}


			/**
			 * "x" botton clicked, confirm no changes and close.
			 * */
			protected function closeHandler(event:Event):void {
				var needSave:Boolean = !ObjectUtil.compareObjects(_role, _undoRole);
				if (needSave) {
					Alert.show(ResourceManager.getInstance().getString('admin', 'discard_changes'), ResourceManager.getInstance().getString('admin', 'discard_changes_title'), Alert.YES | Alert.NO, null, messageReleaseHandler);
				}
				else {
					requestClose();
				}
			}


			/**
			 * close window and discard changes or leave window open
			 * */
			protected function messageReleaseHandler(e:CloseEvent):void {
				if (e.detail == Alert.YES) {
					requestClose();
				}
			}


			/**
			 * dispatch close event
			 * */
			protected function requestClose():void {
				dispatchEvent(new Event(RoleDrilldown.CLOSE));
			}


			/**
			 * check if any updates were made.
			 * if so, ask to save new data.
			 * */
			protected function requestSave():void {
				var needSave:Boolean = !ObjectUtil.compareObjects(_role, _undoRole);
				if (needSave) {
					dispatchEvent(new Event(RoleDrilldown.SAVE));
				}
				else {
					requestClose();
				}
			}



			/**
			 * pass initial data.
			 * @param role 		the role to edit / create
			 * @param mode		edit / add mode
			 * @param partnerPermissions	all partner's permissions (used for editing roles)
			 * */
			public function init(role:KalturaRole, mode:String, partnerPermissions:XML):void {
				_formData = partnerPermissions;
				// the following intentionaly use setters. 
				setRole(role);
				setMode(mode);
			}


			/**
			 * This function takes an XML of a group and builds a Vbox with a checkbox for the group name
			 * and its children checkboxes (if needed). All checkboxs are pushed to a member array - allCheckboxes.
			 * The checkbox id is its permission id, for checkboxes without children as well. 
			 * Inner checkboxes has the instance of their parent as their data.
			 */
			private function buildGroup(group:XML, debug:Boolean = true):VBox {
				var vb:VBox = new VBox();
				vb.percentWidth = 100;
				vb.id = group..@text.toString().split(" ").join();
				//build the top level checkbox
				var groupCb:CheckBox = new CheckBox();
				groupCb.label = group.attribute("text");
				groupCb.id = group.attribute("id")[0].toString();
				if (debug)
					groupCb.toolTip = group.attribute("id")[0].toString();
				allCheckboxes.push(groupCb);
				groupCb.data = {isGroup:true};

				
				//create a container for the group and the option button 
				var hbox:HBox = new HBox
				vb.addChild(hbox);
				hbox.percentWidth = 100; 
				hbox.addChild(groupCb);
				
				var permissions:XMLList = group..permission;
				
				//special case for group without children (base only)
				if (permissions.length() == 0) {
					return vb;
				}
				
				// add Group Controls (hbox, groupcb):
				var spacer:Spacer = new Spacer();
				hbox.addChild(spacer);
				spacer.percentWidth = 100;
				
				var openLinkBtn:LinkButton = new LinkButton();
				openLinkBtn.label = ResourceManager.getInstance().getString( 'admin' , 'advanced' );
				hbox.addChild(openLinkBtn);
				
				var closeLinkBtn:LinkButton = new LinkButton();
				closeLinkBtn.label = ResourceManager.getInstance().getString( 'admin' , 'close' )
				hbox.addChild(closeLinkBtn);
				// -----------------
				
				var innerCbArray:Array = new Array();
				// build the inner checkboxes 
				var cb:CheckBox;
				var showButtons:Boolean = true;
				// override groups that has one item inside and marked with hideGroup="true"
				if (group.attribute("hideGroup").toString()=="true")
				{
					// asuming group has 1 child, it will override its own text & id from its child.   
					groupCb.label = group.children()[0].attribute("text")[0].toString();
					if (debug)
						groupCb.toolTip = group.children()[0].attribute("id")[0].toString();
					groupCb.id = group.children()[0].attribute("id")[0].toString();
					showButtons = false;
					
				}else
				{
					for each (var permission:XML in permissions) {
						cb = createInnerCheckbox(permission, groupCb, debug);
						
						vb.addChild(cb);
						innerCbArray.push(cb);
						allCheckboxes.push(cb);
					}
				}
				
				allPermissionGroupManagers.push(new PermissionGroupManager(	groupCb , innerCbArray , closeLinkBtn , openLinkBtn , showButtons)); 
				
				return vb;
			}
			

			/**
			 * create the inner checkboxes of a group
			 * @param permission	description of the checkbox
			 * @param groupCb		main checkbox for this group
			 * @param addTooltip	add a tooltip to the new checkbox
			 * @return the created checkbox
			 * */
			protected function createInnerCheckbox(permission:XML, groupCb:CheckBox, addTooltip:Boolean):CheckBox {
				var cb:CheckBox = new CheckBox();
				cb.maxWidth = 250
				cb.label = permission.attribute("text")[0].toString();
				cb.setStyle("paddingLeft", "10");
				if (addTooltip)
					cb.toolTip = permission.attribute("id")[0].toString()
				cb.id = permission.attribute("id")[0].toString();
				cb.data = groupCb; //pointer to the group id
				return cb;
			}
			
			/**
			 * Simulate a get all selected items action
			 */
			protected function saveBtn_clickHandler(event:MouseEvent):void {
				//TODO + insert add/edit stuff here 
				/* NOTE: when editing role, make sure NOT TO OVERRIDE permissions 
				 * that are not relevant to KMC. */
				
				Alert.show(getSelectedPermissions().join());
			}


			/**
			 * Return an array of the selected checkboxes
			 */
			protected function getSelectedPermissions():Array {
				var arr:Array = new Array();
				for each (var cb:CheckBox in allCheckboxes) {
					if ((cb as CheckBox).selected == true) {
						var id:String = (cb as CheckBox).id;
						if (id)
							arr.push(id);
					}
				}
				return arr;
			}


			/**
			 * Comma seperated list of permission to show. This function must run only after the form was
			 * build by the partner full permission id. It sets the relevant checkboxes and also their parent
			 */
			protected function fillPermissions(permissionList:String):void {
				var SelectedPermissionIds:Array = permissionList.split(",");
				// setting the selected / not selected checkboxes
				for each (var permission:String in SelectedPermissionIds) {
					for each (var cb:CheckBox in allCheckboxes) {
						if (cb.id == permission) {
							cb.selected = true;
							if (cb.data && cb.data is CheckBox)
								(cb.data as CheckBox).selected = true;
						}
					}
				}
				// applying the half-selected style
				for each (var pm:PermissionGroupManager in allPermissionGroupManagers )
				{
					pm.init();
				}

			}
			/**
			 * Comma seperated list of permission to disable sinc the partner does not have this feature. 
			 */
			protected function disablePermission(permissionList:String):void {
				var disablePermission:Array = permissionList.split(",");
				// setting the selected / not selected checkboxes
				for each (var permission:String in disablePermission) {
					for each (var cb:CheckBox in allCheckboxes) {
						if (cb.id == permission) {
							cb.enabled = false;
						}
					}
				}
				// applying the half-selected style
				for each (var pm:PermissionGroupManager in allPermissionGroupManagers )
				{
					pm.init();
				}

			}



			/**
			 * set window mode.
			 * optional values are listed in <code>DrilldownMode</code>.
			 * */
			protected function setMode(newMode:String):void {
				_mode = newMode;
				if (_ready) {
					switch (newMode) {
						case DrilldownMode.ADD:
							title = ResourceManager.getInstance().getString('admin', 'add_role_title');
							break;
						case DrilldownMode.EDIT:
							title = ResourceManager.getInstance().getString('admin', 'edit_role_title');
							break;
					}
				}
			}


			/**
			 * @private
			 * NOTE: when setting this attribute a new Role is created and used,
			 * so when getting this attribute the NEW entity is returned.
			 */
			protected function setRole(value:KalturaRole):void {
				_role = value;
				// create working copy
				_undoRole = new KalturaRole();
				var atts:Array = ObjectUtil.getObjectAllKeys(value);
				for (var i:int = 0; i < atts.length; i++) {
					_undoRole[atts[i]] = value[atts[i]];
				}
			}


			/**
			 * this is the original role entry. after being set it is not touched.
			 * all changes are being made on <code>_undoRole</code>, which is a
			 * copy of this object.
			 * */
			public function get role():KalturaRole {
				return _role;
			}


			/**
			 * current window mode
			 * */
			public function get mode():String {
				return _mode;
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%">
		<mx:Form width="100%" textAlign="left" paddingLeft="0">
			<mx:FormItem width="100%" label="{ResourceManager.getInstance().getString('admin', 'role_name')}">
				<mx:TextInput text="{ResourceManager.getInstance().getString('admin', 'role_name_default')}"
							  id="nameTi" width="100%"/>
			</mx:FormItem>
			<mx:FormItem width="100%" label="{ResourceManager.getInstance().getString('admin', 'rdd_description')}">
				<mx:TextArea id="descriptionTi" width="100%"/>
			</mx:FormItem>
		</mx:Form>
	</mx:VBox>
	<mx:HRule width="100%"/>
	<mx:Label text="{ResourceManager.getInstance().getString('admin', 'set_permissions')}"/>
	<mx:VBox id="myForm" width="100%" height="310" verticalScrollPolicy="auto" maxHeight="310" disabledOverlayAlpha="0"/>
	<mx:HBox width="100%" horizontalAlign="center" height="30">
		<mx:Button label="{ResourceManager.getInstance().getString('admin', 'save')}"
				   id="saveBtn" click="saveBtn_clickHandler(event)"/>
	</mx:HBox>
</containers:HelpTitleWindow>
