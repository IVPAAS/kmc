<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		 xmlns:view="com.kaltura.kmc.modules.admin.view.*" xmlns:controls="com.kaltura.controls.*"
		 creationComplete="bindSetters()">
	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.KalturaClient;
			import com.kaltura.commands.user.UserAdd;
			import com.kaltura.commands.user.UserDelete;
			import com.kaltura.containers.HelpTitleWindow;
			import com.kaltura.kmc.events.KmcErrorEvent;
			import com.kaltura.kmc.modules.admin.control.DrilldownEvent;
			import com.kaltura.kmc.modules.admin.control.ListRolesEvent;
			import com.kaltura.kmc.modules.admin.control.ListUsersEvent;
			import com.kaltura.kmc.modules.admin.control.UserEvent;
			import com.kaltura.kmc.modules.admin.model.UserDrilldownMode;
			import com.kaltura.kmc.modules.admin.model.UsersModel;
			import com.kaltura.types.KalturaUserStatus;
			import com.kaltura.vo.KalturaFilterPager;
			import com.kaltura.vo.KalturaUser;
			import com.kaltura.vo.KalturaUserFilter;
			
			import flash.net.navigateToURL;
			
			import mx.binding.utils.BindingUtils;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;

			[Bindable]
			public var model:UsersModel;
			
			
			/**
			 * a popup window with user details
			 * */
			protected var _userDrilldown:UserDrilldown;
			


			
			/**
			 * refresh subtab data
			 * */
			public function refreshData():void {
				listRoles();
				listUsers(0);
				// reset selected user
				var ce:UserEvent;
				ce = new UserEvent(UserEvent.SELECT_USER, null);
				ce.dispatch();
			}
			
			protected function listRoles():void {
				//TODO + re-think when this should take place
				var ce:ListRolesEvent;
				ce = new ListRolesEvent(ListRolesEvent.LIST_ROLES);
				ce.dispatch();
			}
			
			
			protected function bindSetters():void {
				BindingUtils.bindSetter(onDrilldownStateChange, model, "drilldownMode");
			}
			
			
			/**
			 * re-load data, close popup, etc.
			 * */
			protected function onDrilldownStateChange(value:String):void {
				switch (value) {
					case UserDrilldownMode.ADD:
					case UserDrilldownMode.EDIT:
						// do nothing
						break;
					case UserDrilldownMode.NONE:
						// if we got here, data save completed successfuly
						closeUserDrilldown(null);
						refreshData();
						break;
				}
			}
			
			
			/**
			 * dispatch Cairngorm event to raise a list users command 
			 * */
			protected function listUsers(pageNumber:int):void {
				var kfp:KalturaFilterPager = new KalturaFilterPager();
				if (paging.kalturaFilterPager.pageSize != int.MIN_VALUE) {
					kfp.pageSize = paging.kalturaFilterPager.pageSize;
				}
				else {
					kfp.pageSize = 10;
				}
				if (pageNumber) {
					kfp.pageIndex = pageNumber;
				}
				else {
					kfp.pageIndex = paging.kalturaFilterPager.pageIndex;
				}
				
				var ce:ListUsersEvent;
				ce = new ListUsersEvent(ListUsersEvent.LIST_USERS, model.filter, kfp);
				ce.dispatch();
			}


			/**
			 * link to a .corp up-sell link
			 * */
			protected function getMoreUsers(event:MouseEvent):void {
				navigateToURL(new URLRequest(model.upgradeLink),"_blank"); 
			}


			/**
			 * load users according to paging component value
			 * */
			protected function gotoPage():void {
				listUsers(paging.selectedPage);
			}
			
			
			/**
			 * get the edited user and update server
			 * */
			protected function saveUserData(e:Event):void {
				var ue:UserEvent;
				// need to know if new user or update user.
				if (model.drilldownMode == UserDrilldownMode.ADD) {
					// add user
					ue = new UserEvent(UserEvent.ADD_USER, _userDrilldown.user);
				}
				else if (model.drilldownMode == UserDrilldownMode.EDIT) {
					// edit user
					ue = new UserEvent(UserEvent.UPDATE_USER, _userDrilldown.user);
				}
				ue.dispatch();
			}
			
			
			/**
			 * hides and destroys the user drilldown window
			 * */
			protected function closeUserDrilldown(e:Event):void {
				if (_userDrilldown) {
					PopUpManager.removePopUp(_userDrilldown);
					_userDrilldown.removeEventListener(UserDrilldown.SAVE, saveUserData);
					_userDrilldown.removeEventListener(UserDrilldown.CLOSE, closeUserDrilldown);
					_userDrilldown = null;
					var de:DrilldownEvent = new DrilldownEvent(DrilldownEvent.SET_STATE, UserDrilldownMode.NONE);
					de.dispatch();
				}
			}
			
			
			/**
			 * open drilldown window with data of currently selected user
			 * @return the newly created popup window
			 * */
			protected function drillToSelectedUser():UserDrilldown {
				var ud:UserDrilldown = new UserDrilldown();
				ud.user = model.selectedUser;
				ud.mode = model.drilldownMode;
				ud.roles = model.allRoles;
				ud.addEventListener(UserDrilldown.SAVE, saveUserData);
				ud.addEventListener(UserDrilldown.CLOSE, closeUserDrilldown);
				PopUpManager.addPopUp(ud, this, true);
				PopUpManager.centerPopUp(ud);
				return ud;
			}
			

			/**
			 * show the "add user" dialog
			 * */
			protected function openAddUserDialog(event:MouseEvent):void {
				// set the selected user to a new KalturaUser.
				var ce:CairngormEvent = new UserEvent(UserEvent.SELECT_USER, new KalturaUser());
				ce.dispatch();
				
				ce = new DrilldownEvent(DrilldownEvent.SET_STATE, UserDrilldownMode.ADD);
				ce.dispatch();
				
				// open drilldown for this user
				_userDrilldown = drillToSelectedUser();
			}


			/**
			 * show the "edit user" dialog
			 * */
			protected function openEditUserDialog(event:Event):void {
				var ce:DrilldownEvent = new DrilldownEvent(DrilldownEvent.SET_STATE, UserDrilldownMode.EDIT);
				ce.dispatch();
				_userDrilldown = drillToSelectedUser();
			}
			


			/**
			 * delete selected user
			 * */
			protected function deleteUser(event:Event):void {
				var ce:UserEvent = new UserEvent(UserEvent.DELETE_USER, model.selectedUser);
				ce.dispatch();
			}


			/**
			 * toggle between blocked / active stauses of the selected user 
			 * */
			protected function toggleUserStatus(event:Event):void {
				if (model.selectedUser.status != KalturaUserStatus.ACTIVE &&
					model.selectedUser.status != KalturaUserStatus.BLOCKED) {
					// this user is not active or blocked (probably deleted and shouldn't 
					// be in the table), so we can't toggle status
					dispatchEvent(new KmcErrorEvent(KmcErrorEvent.ERROR, ResourceManager.getInstance().getString('admin', 'cant_toggle')));
				}
				var ce:UserEvent = new UserEvent(UserEvent.TOGGLE_USER_STATUS, model.selectedUser);
				ce.dispatch();
			}


			/**
			 * select a user
			 * */
			protected function setSelectedUser(event:Event):void {
				var ce:UserEvent = new UserEvent(UserEvent.SELECT_USER, table.selectedUser);
				ce.dispatch();
			}
			
		]]>
	</mx:Script>
	<mx:HBox>
		<mx:Label text="{ResourceManager.getInstance().getString('admin', 'authorized_users')}" styleName="pageTitle"/>
		<mx:LinkButton label="{ResourceManager.getInstance().getString('admin', 'upgrade')}" click="getMoreUsers(event)"
					   styleName="LinkButton"/>
	</mx:HBox>

	<mx:HBox width="100%" >
		<mx:VBox id="tableContainer" width="100%" >
			<view:UsersTable id="table" width="100%" dataProvider="{model.users}" roles="{model.allRoles}" rowCount="10"
							 drillDown="openEditUserDialog(event)" deleteUser="deleteUser(event)" 
							 toggleBlock="toggleUserStatus(event)" selectUser="setSelectedUser(event)" />
			<controls:Paging id="paging" width="{table.width}" styleName="paging" nextPage="gotoPage()"
							 prvPage="gotoPage()" getPageNum="gotoPage()" rowsInPageChange="gotoPage()"
							 showRowsInPage="true" showNextFlag="true" showPrvFlag="true" totalCount="{model.totalUsers}" />
		</mx:VBox>

		<mx:Spacer width="5"/>

		<mx:VBox id="actionButtonsContainer" styleName="blueBox" height="100%" horizontalAlign="left">
			<mx:Button id="addBtn" label="{resourceManager.getString('admin','add')}" styleName="addPlst" width="100%"
					   height="30" buttonMode="true" click="openAddUserDialog(event)"/>
		</mx:VBox>
	</mx:HBox>
</mx:VBox>
