<?xml version="1.0" encoding="utf-8"?>
<!---
	Flavours tab of EntryDetailsWin
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:entryDetails="com.kaltura.kmc.modules.content.view.window.entrydetails.*" width="100%"
		 height="100%" creationComplete="onCreationComplete()"
		 implements="com.kaltura.kmc.modules.content.business.IDrilldownPanel">
	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.kmc.modules.content.events.EntryEvent;
			import com.kaltura.kmc.modules.content.events.ProfileEvent;
			import com.kaltura.kmc.modules.content.events.WindowEvent;
			import com.kaltura.kmc.modules.content.model.EntryDetailsModel;
			import com.kaltura.kmc.modules.content.model.states.WindowsStates;
			import com.kaltura.kmc.modules.content.view.window.entrydetails.renderers.FlavorAssetIDRenderer;
			import com.kaltura.kmc.modules.content.view.window.flavors.AddFlavorAssetsWindow;
			import com.kaltura.kmc.modules.content.vo.FlavorAssetWithParamsVO;
			import com.kaltura.kmc.modules.content.vo.UploadFileVo;
			import com.kaltura.types.KalturaEntryReplacementStatus;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaEntryType;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.vo.KalturaBaseEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			
			public static const VIDEO_TYPES:String = "*.flv;*.asf;*.qt;*.mov;*.mpg;*.avi;*.wmv;*.mp4;*.3gp;*.f4v;*.m4v";
			public static const AUDIO_TYPES:String = "*.flv;*.asf;*.qt;*.mov;*.mpg;*.avi;*.wmv;*.mp3;*.wav";
			
			[Bindable]
			private var _showActions:Boolean;
			
			[Bindable]
			private var _showReplacenentInfo:Boolean;
			
			private var _selectedEntry:KalturaBaseEntry;
			private var _referenceEntry:KalturaBaseEntry;
			
			[Bindable]
			public var flavorAssets:ArrayCollection;
//			private var _flavorAssets:ArrayCollection;
			
			private var _fileReferenceList:FileReferenceList;
			private var _fileReference:FileReference;
			private var _selectedFlavorAssetId:String;
			
			private var _entryDetailsModel:EntryDetailsModel;
			
			public var flavorsWatcher:ChangeWatcher;
			public var replacementEntryWatcher:ChangeWatcher;


			/**
			 * will be called once referenceEntry has changed, and set values according to the given entry
			 * */
			public function setReplacementData(value:KalturaBaseEntry):void
			{
				_referenceEntry = value;
				if (_referenceEntry) {
					switch (_referenceEntry.replacementStatus) {
						case KalturaEntryReplacementStatus.APPROVED_BUT_NOT_READY:
						case KalturaEntryReplacementStatus.NOT_READY_AND_NOT_APPROVED:
							stateLabel.text = resourceManager.getString('cms','readyState') + resourceManager.getString('cms','replacementProcessState');
							replacementStatusBtn.label = resourceManager.getString('cms', 'statusProcessing');
							break;
						case KalturaEntryReplacementStatus.READY_BUT_NOT_APPROVED:
							stateLabel.text = resourceManager.getString('cms','readyState') + resourceManager.getString('cms','replacementRFRState');
							replacementStatusBtn.label = resourceManager.getString('cms', 'readyForReviewBtn');
							break;
					}
				}
			}

			/**
			 * loads required data from server
			 * */
			public function initData():void {
				if(_selectedEntry != null)
				{
					//fix bug in performance
					if (!flavorsWatcher)
						flavorsWatcher = BindingUtils.bindProperty(this, "flavorAssets", entryDetailsModel, "flavorParamsAndAssetsByEntryId");
					var cgEvent : EntryEvent = new EntryEvent(EntryEvent.GET_FLAVOR_ASSETS, _selectedEntry);
					cgEvent.dispatch();
					if (_selectedEntry.referenceId) {
						if (!replacementEntryWatcher)
							replacementEntryWatcher = BindingUtils.bindSetter(setReplacementData, entryDetailsModel, "referenceEntry");
						var getReferenceEntry:EntryEvent = new EntryEvent(EntryEvent.GET_REFERENCE_ENTRY, null, _selectedEntry.referenceId);
						getReferenceEntry.dispatch();
					}
				}
				var profileEvent:ProfileEvent = new ProfileEvent(ProfileEvent.LIST_CONVERSION_PROFILES_AND_FLAVOR_PARAMS);
				profileEvent.dispatch();
			}
			
			private function onCreationComplete():void {
				dg.addEventListener(FlavorsTable.UPLOAD_FLAVOR, onFlavorUploadSelected);
			}
			
			/**
			 * will be called when selecting to upload a specific flavor
			 * */
			private function onFlavorUploadSelected(event:Event):void {
				_selectedFlavorAssetId = (event.target.data as FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams.flavorAsset.id;
				_fileReference = new FileReference();
				var fileFilter:FileFilter = getTypeFilter(parseInt(_selectedEntry.mediaType));
				if (fileFilter) {
					_fileReference.addEventListener(Event.SELECT, onFlavorSelected);
					_fileReference.browse(new Array(fileFilter));
				}
			}
			
			/**
			 * handles user selection for replacing existing flavor
			 * */
			private function onFlavorSelected(event:Event) : void {
				_fileReference.removeEventListener(Event.SELECT, onFlavorSelected);

				var uploadFile:UploadFileVo = new UploadFileVo();
				uploadFile.fileName = _fileReference.name;
				uploadFile.fileData = _fileReference;
				uploadFile.flavorAssetId = _selectedFlavorAssetId
				openAddFlavorsWindow(new ArrayCollection(new Array(uploadFile)), false);	
			}
			
			public function get entryDetailsModel():EntryDetailsModel
			{
				return _entryDetailsModel;
			}

			public function set entryDetailsModel(value:EntryDetailsModel):void
			{
				_entryDetailsModel = value;
			}
			

			public function get selectedEntry():KalturaBaseEntry
			{
				return _selectedEntry;
			}
		
			public function set selectedEntry(selectedEntry:KalturaBaseEntry):void
			{
				_selectedEntry = selectedEntry;
				if (_selectedEntry.replacedEntryId)  {
					replacementEntryId.text = _selectedEntry.referenceId;
					_showActions = false;
					_showReplacenentInfo = true;
				}
				else {
					//sets labels according to entry's status
					switch (_selectedEntry.status) {
						case KalturaEntryStatus.NO_CONTENT:
							_showActions = true;
							stateLabel.text = resourceManager.getString('cms','noContentState');
							if (_selectedEntry.mediaType == KalturaMediaType.VIDEO)
								actionLabel.text = resourceManager.getString('cms','addVideo');
							else if (_selectedEntry.mediaType == KalturaMediaType.AUDIO)
								actionLabel.text = resourceManager.getString('cms','addAudio');
							break;
						case KalturaEntryStatus.READY:
							stateLabel.text = resourceManager.getString('cms','readyState');
							_showActions = true;
							noteLabel.visible = noteLabel.includeInLayout = true;
							if (_selectedEntry.mediaType == KalturaMediaType.VIDEO)
								actionLabel.text = resourceManager.getString('cms','replaceVideo');
							else if (_selectedEntry.mediaType == KalturaMediaType.AUDIO)
								actionLabel.text = resourceManager.getString('cms','replaceAudio');
							break;
						case KalturaEntryStatus.ERROR_CONVERTING:
						case KalturaEntryStatus.ERROR_IMPORTING:
							stateLabel.text = resourceManager.getString('cms','errorState');
							_showActions = false;
							break;
						default:
							stateLabel.text = resourceManager.getString('cms','notReadyState');
							_showActions = false;
					} 
				}

			

			}
	/* 		
			public function get flavorAssets():ArrayCollection
			{
				return _flavorAssets;
			}
		
			public function set flavorAssets(flavorAssets:ArrayCollection):void
			{
				_flavorAssets = flavorAssets;
				
			} */
			
			public function set hideColumns(indices:String):void {
				var ind:Array = indices.split(",");
				var arrCol:ArrayCollection = new ArrayCollection(dg.columns);
				for (var i:int = 0; i<ind.length; i++) {
					arrCol.removeItemAt(int(ind[i]));
				}
				dg.columns = arrCol.source;
				for each (var col:DataGridColumn in arrCol) {
					col.width = col.width;
				} 
			}
			
			public function get hideColumns():String {
				return '';
			}
			
			/**
			 * will open a browse window and allow multiple selection
			 * */
			private function onUploadFilesClick():void {
				_fileReferenceList = new FileReferenceList();
				var fileFilter:FileFilter = getTypeFilter(parseInt(selectedEntry.mediaType));
				if (fileFilter)  {
					_fileReferenceList.addEventListener(Event.SELECT, onFlavorsSelected);
					_fileReferenceList.browse(new Array(fileFilter));
				}
			}
			
			/**
			 * returns the suitable fileFilter according to given mediaType
			 * */
			private function getTypeFilter(mediaType:int):FileFilter {
				var fileFilter:FileFilter;
				if (mediaType == KalturaMediaType.VIDEO) 
					fileFilter = new FileFilter(resourceManager.getString('cms','video') +  "(" + VIDEO_TYPES+ ")" , VIDEO_TYPES );
				else if (mediaType == KalturaMediaType.AUDIO)
					fileFilter = new FileFilter(resourceManager.getString('cms','audio') +  "(" + AUDIO_TYPES+ ")" , AUDIO_TYPES );
				
				return fileFilter;
			}
			
			/**
			 * opens AddFlavorsAssetsWindow according to given params
			 * */
			private function openAddFlavorsWindow(filesList:ArrayCollection, allowAddFiles:Boolean = true) : void {
				var addFlavorsAssetsWindow:AddFlavorAssetsWindow = new AddFlavorAssetsWindow();
				addFlavorsAssetsWindow.entry = _selectedEntry;
				BindingUtils.bindProperty(addFlavorsAssetsWindow, "conversionProfiles",entryDetailsModel, "conversionProfsWFlavorParams"); 
				addFlavorsAssetsWindow.filesList = filesList;
				addFlavorsAssetsWindow.allowAddFiles = allowAddFiles;
				PopUpManager.addPopUp(addFlavorsAssetsWindow, this, true);
				PopUpManager.centerPopUp(addFlavorsAssetsWindow);
			}
			

			/**
			 * handle user files selection to upload
			 * */
			private function onFlavorsSelected(event:Event):void {
				_fileReferenceList.removeEventListener(Event.SELECT, onFlavorsSelected);
				
				var filesList:ArrayCollection = new ArrayCollection();
				for each (var fileReference:FileReference in _fileReferenceList.fileList) {
					var uploadFile:UploadFileVo = new UploadFileVo();
					uploadFile.fileName = fileReference.name;
					uploadFile.fileData = fileReference;
					filesList.addItem(uploadFile);
				}
				
				openAddFlavorsWindow(filesList);
			}
			
			/**
			 * opens another entry drill down window, for the replacement entry
			 * */
			private function onReplacementStautsBtnClick():void {
				var openWindow:WindowEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.REFERENCE_ENTRY_DETAILS_WINDOW);
				openWindow.dispatch();
			}
			
			private function onCancelReplacementClick():void {
				
			}
			private function onApproveReplacementClick():void {
				
			}
			
		]]>
	</mx:Script>
	
	
	<mx:HBox>
		<mx:Label text="{resourceManager.getString('cms','currentState')}" styleName="flavorsTitleLabel"/>
		<mx:Label id="stateLabel" styleName="flavorsCurrentState"/>
	</mx:HBox>
	<mx:HBox visible="{_showActions}" includeInLayout="{_showActions}">
		<mx:Label id="actionLabel" styleName="flavorsActionTitle"/>
		<mx:Button id="uploadFilesBtn" label="{resourceManager.getString('cms','uploadFiles')}" click="{onUploadFilesClick()}" styleName="flavorsActionBtn"/>
		<mx:Button id="matchFromDropBtn" label="{resourceManager.getString('cms','matchFromDrop')}" styleName="flavorsActionBtn"/>
	</mx:HBox>
	<mx:Label id="noteLabel" visible="false" includeInLayout="false" text="{resourceManager.getString('cms','replacementNote')}" styleName="replacementNoteLabel"/>
	<mx:HBox id="replacementInfoHBox" width="100%" visible="{_showReplacenentInfo}" includeInLayout="{_showReplacenentInfo}" horizontalGap="0">
		<mx:Label text="{resourceManager.getString('cms','replacementEntryId')}" styleName="flavorsTitleLabel"/>
		<mx:Label id="replacementEntryId" text="00000000"/>
		<mx:Spacer width="10"/>
		<mx:Label text="{resourceManager.getString('cms','status') + ':'}" styleName="flavorsTitleLabel"/>
		<mx:LinkButton id="replacementStatusBtn" click="{onReplacementStautsBtnClick()}"/>
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="{resourceManager.getString('cms','cancelReplacement')}" click="{onCancelReplacementClick()}"/>
		<mx:Label text="/" width="7"/>
		<mx:LinkButton label="{resourceManager.getString('cms','approveReplacement')}" click="{onApproveReplacementClick()}"/>
	</mx:HBox>
	<mx:Text width="100%" text="{resourceManager.getString('cms','flavorAssetsDescription')}"/>
	<entryDetails:FlavorsTable id="dg" flavorAssets="{flavorAssets}"/>

</mx:VBox>
