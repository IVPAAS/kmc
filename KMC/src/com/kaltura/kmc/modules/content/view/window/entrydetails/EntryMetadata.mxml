<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:utils="com.kaltura.kmc.modules.content.utils.*"
		 >
	<mx:Metadata>
		
		[Event(name="untrackableChange", type="flash.events.Event")] 
		[Event(name="openPreview", type="flash.events.Event")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.kmc.modules.content.events.UploadEntryEvent;
			import com.kaltura.kmc.modules.content.model.Context;
			import com.kaltura.kmc.modules.content.model.EntryDetailsModel;
			import com.kaltura.kmc.modules.content.model.types.KDPEventTypes;
			import com.kaltura.kmc.modules.content.vo.EntryDetailsValidationError;
			import com.kaltura.types.KalturaEditorType;
			import com.kaltura.types.KalturaEntryModerationStatus;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.KTimeUtil;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaLiveStreamAdminEntry;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMixEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.formatters.DateFormatter;
			import mx.utils.StringUtil;
			
			public static const UNTRACKABLE_CHANGE:String = "untrackableChange";
			public static const OPEN_PREVIEW:String = "openPreview";
			
			
			/**
			 * reference to kdp3Loader.
			 * due to performance issue that we fixed, this is static.
			 * */
			private static var kdp3SwfLoader:SWFLoader;
			
			
			private const LABEL_WIDTH:Number = 105;
			private const TEXT_WIDTH:Number = 320;
			
			[Bindable]
			public var selectedEntry:KalturaBaseEntry;
			
			[Bindable]
			/**
			 * indicates the current entry is a livestream entry
			 * */
			public var isLiveStream:Boolean;
			
			[Bindable]
			public var context:Context;
			
			[Bindable]
			public var entryDetailsModel:EntryDetailsModel;
			
			
			
			private var _fr:FileReference;
			
			private var _changedThumbnail:Boolean;
			
			/**
			 * entry thumbnail for image entries
			 * */
			private var _entryImg:Image;
			
			
			/**
			 * remove any playing entry from the preview player
			 * */
			public function clearPlayer():void {
				if (kdp3SwfLoader && kdp3SwfLoader.content) {
					kdp3SwfLoader.content['sendNotification'](KDPEventTypes.DO_STOP);
					kdp3SwfLoader.content['sendNotification'](KDPEventTypes.CLEAN_MEDIA); //clear the entry from the kdp
				}
			}
			
			
			/**
			 * see all data on the panel is legal and save data
			 * @return an object with error code 
			 * */
			public function save():EntryDetailsValidationError {
				var result:EntryDetailsValidationError = new EntryDetailsValidationError();
				// entry name
				if (name_input.text == "") {
					result.error = EntryDetailsValidationError.ENTRY_NAME_MISSING;
					
				}
				else {
					// categories section
					// auto-complete event isn't full so we need to add this here
					var catArr:Array = categoriesTextInput.text.split(',');
					var tempArr:Array = [];
					for each (var cat:String in catArr) {
						var sCat:String = StringUtil.trim(cat);
						if (sCat != '') {
							tempArr.push(sCat);
						}
					}
					if (tempArr.length > 8) {
						result.error = EntryDetailsValidationError.CATEGORIES_LIMIT;
					}
					else {
						// set the categories on the entry
						selectedEntry.categories = tempArr.join(',');
						
						if (isLiveStream)
							(selectedEntry as KalturaLiveStreamAdminEntry).offlineMessage = offlineMessage.text;
					}
				}
				return result;
			}
			
			
			
			/**
			 * Format the creation date
			 */
			private function formatDate(date:Number):String {
				var df:DateFormatter = new DateFormatter();
				df.formatString = resourceManager.getString('cms', 'drilldowndateformat');;
				var dt:Date = new Date();
				dt.setTime(date * 1000);
				return df.format(dt);
			};
			
			private function displayThumbnailOption(value:Boolean):void {
				thumbnailOptionBox.visible = thumbnailOptionBox.includeInLayout = value;
			}
			
			
			private function displayCaptureFromPlayer(value:Boolean):void {
				captureFromPlayer.visible = value;
			}
			
			/**
			 * this can't be done on creationComplete because selectedEntry is
			 * only set at the parent's creationComplete, which comes later. so
			 * the parent has to manualy initialize this panel.
			 * */
			public function init():void {
				// bind to the REAL entry, not the copy, so the thumbnail  
				// image will be updated when a new thumbnail is uploaded
				BindingUtils.bindSetter(updateUndoEntryThumbnail, entryDetailsModel.selectedEntry,
					"thumbnailUrl");
				
				// ===========================================================
				
				var showThumbnailUi:Boolean = false;
				if (selectedEntry is KalturaMediaEntry &&
					((selectedEntry as KalturaMediaEntry).mediaType != KalturaMediaType.IMAGE)) {
					showThumbnailUi = true;
				}
				else {
					showThumbnailUi = false;
				}
				if (selectedEntry is KalturaMixEntry) {
					showThumbnailUi = true;
				}
				
				displayThumbnailOption(showThumbnailUi);				
				
				// ===========================================================
				
				if (selectedEntry.mediaType == KalturaMediaType.AUDIO || isLiveStream) {
					displayCaptureFromPlayer(false);
				}
				else {
					displayCaptureFromPlayer(true);
				}
				if ((selectedEntry is KalturaMediaEntry) &&
					(selectedEntry as KalturaMediaEntry).mediaType == KalturaMediaType.IMAGE) {
					kdp3Loader.includeInLayout = kdp3Loader.visible = false;
					addImageThumb();
				}
				else {
					//mix or video
					loadKDP();
				}
			}
			
			/**
			 * Load KDP function
			 */
			private function loadKDP():void {
				//if this is the second time we open the content
				if (kdp3SwfLoader && kdp3SwfLoader.content) {
					var kdp3LoaderParent:DisplayObjectContainer = kdp3Loader.parent;
					
					kdp3LoaderParent.addChildAt(kdp3SwfLoader, kdp3LoaderParent.getChildIndex(kdp3Loader));
					kdp3LoaderParent.removeChild(kdp3Loader);
					//listen to kdp ready to show it because on the second time if we won't do that we will see the prev thumb
					//because this is static KDP (due to performance issue that we fixed)
					kdp3SwfLoader.visible = false;
					kdp3SwfLoader.content.addEventListener(KDPEventTypes.MEDIA_READY, showKDP);
					kdp3SwfLoader.content["sendNotification"](KDPEventTypes.CHANGE_MEDIA,
						{entryId: entryDetailsModel.selectedEntry.id});
				}
				else {
					var newUrl:String = "http://" + context.rootUrl + "/kwidget/wid/_" +
						context.kc.partnerId + "/ui_conf_id/" + context.drilldownUiconf + "/nowrapper/1";
					kdp3Loader.scaleContent = false;
					kdp3Loader.loaderContext = new LoaderContext(true, new ApplicationDomain());
					kdp3Loader.load(newUrl);
				}
			}
			
			
			
			
			private function showKDP(event:Event = null):void {
				kdp3SwfLoader.visible = true;
			}
			private function onStandardClick():void {
				mix(selectedEntry.mediaType, selectedEntry.type, KalturaEditorType.SIMPLE);
				pausePreview();
			}
			
			
			private function onAdvancedEditor():void {
				mix(selectedEntry.mediaType, selectedEntry.type, KalturaEditorType.ADVANCED);
				pausePreview();
			}
			
			private function loadNewThumbnail(value:ArrayCollection):void {
				if (img && value.length > 0)
					img.source = value[0];
			}
			
			/**
			 * save and load new image
			 * */
			private function updateUndoEntryThumbnail(thumbnailUrl:String):void {
				if (selectedEntry) {
					selectedEntry.thumbnailUrl = thumbnailUrl;
					img.source = selectedEntry.thumbnailUrl;
				}
			}
			
			
			/**
			 * pause the preview player
			 * */
			public function pausePreview():void {
				if (kdp3SwfLoader && kdp3SwfLoader.content) {
					kdp3SwfLoader.content['sendNotification'](KDPEventTypes.DO_PAUSE);
				}
			}
			
			private function setFile(event:Event):void {
				_changedThumbnail = true;
				var cgEvent:UploadEntryEvent = new UploadEntryEvent(UploadEntryEvent.UPLOAD_THUMBNAIL,
					selectedEntry.id, _fr);
				cgEvent.dispatch();
				
				KAnalyticsTracker.getInstance().sendEvent(KalturaStatsKmcEventType.CONTENT_CHANGE_THUMBNAIL,
					"contentChangeThumbnail", selectedEntry.id);
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_CHANGE_THUMBNAIL,GoogleAnalyticsConsts.CONTENT);
			}
			
			
			
			private function addImageThumb():void {
				_entryImg = new Image();
				_entryImg.width = 240;
				_entryImg.height = 180;
				_entryImg.maintainAspectRatio = true;
				_entryImg.setStyle("horizontalAlign", "center");
				_entryImg.setStyle("verticalAlign", "middle");
				_entryImg.source = selectedEntry.thumbnailUrl + "/width/240/height/180/bgcolor/F7F7F7/type/2";
				kdpContainer.addChildAt(_entryImg, 0);
			}
			
			
			
			/**
			 * track thumbnail change
			 * */
			private function onThumbnailSaved():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_CHANGE_THUMBNAIL , GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KalturaStatsKmcEventType.CONTENT_CHANGE_THUMBNAIL,
					"KDP3>DrillDown>Change Thumbnail");
			}
			
			
			private function getTypes():Array {
				var allTypes:Array = new Array(getImageTypeFilter());
				return allTypes;
			}

			private function getImageTypeFilter():FileFilter {
				return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
			}
			
			
			private function onUploadNowClick():void {
				_fr = new FileReference();
				_fr.addEventListener(Event.SELECT, setFile);
				_fr.browse(getTypes());
			}
			
			
			private function onCaptureClick():void {
				captureThumbnailCanvas.visible = true;
			}
			
			
			/**
			 * Check if this entry is a mix and if it was made in advanced editor
			 * if it is
			 */
			private function checkIfNotAdvanced(undoToEntry:*):Boolean {
				// editorType.toString();
				if (((undoToEntry is KalturaMixEntry) &&
					(undoToEntry as KalturaMixEntry).editorType == KalturaEditorType.ADVANCED) ||
					selectedEntry.status != KalturaEntryStatus.READY)
					return false;
				return true;
			}
			
			/**
			 * Mix action - create a mix from this entry or open editor
			 */
			private function mix(mediaType:String, type:int, editorType:int):void {
				dispatchEvent(new Event(EntryMetadata.UNTRACKABLE_CHANGE));
				if (type == 2) {
					//this is a mix
					var mixEditorType:String = (selectedEntry as KalturaMixEntry).editorType.toString();
					// arguments: entryId, name , editorType , isNewMix (true: create a mix and then
					// open an editor, false - edit this mix with the matching editor type)
					ExternalInterface.call("kmc.editors.start", selectedEntry.id, selectedEntry.name,
						editorType, false);
				}
				switch (mediaType) {
					//this is an entry (video image or audio)
					case "1":
					case "2":
					case "5":
						// arguments: entryId, name , editorType , isNewMix (true: create a mix and then open an editor, 
						//false - edit this mix with the matching editor type)
						ExternalInterface.call("kmc.editors.start", selectedEntry.id, selectedEntry.name,
							editorType, true);
						break;
				}
				
			}
			
			private function openPreview():void {
				//stop the player from playing 
				if (kdp3SwfLoader) {
					kdp3SwfLoader.content['sendNotification'](KDPEventTypes.DO_STOP);
				}
				dispatchEvent(new Event(EntryMetadata.OPEN_PREVIEW));
			}

			
			
			
			/**
			 * Kdp loaded, initialize it.
			 */
			private function onKDP3Loaded(event:Event):void {
				kdp3SwfLoader = kdp3Loader;
				
				//set kdp params
				var params:Object = new Object();
				params.widgetId = "_" + context.kc.partnerId;
				params.cdnHost = context.cdnHost;
				params.host = context.rootUrl;
				params.autoPlay = "false";
				params.loop = "false";
				params.autoRewind = "false";
				params.sourceType = "entryId";
				params.entryId = entryDetailsModel.selectedEntry.id;
//				if (context.rootUrl)
//					params.host = context.rootUrl;
				if (context.drilldownUiconf)
					params.uiConfId = context.drilldownUiconf;
				params.ks = context.kc.ks;
				params.partnerId = context.kc.partnerId;
				params.subpId = context.kc.partnerId + "00";
				
//				params.cdnUrl = context.rootUrl;
				params.debugMode = context.debugMode;
				
				kdp3SwfLoader.content["flashvars"] = params;
				//start the loading sqeunce of the kdp	
				kdp3SwfLoader.content["init"]();
				kdp3SwfLoader.addEventListener(KDPEventTypes.THUMBNAIL_SAVED, onThumbnailSaved)
			}
			
			/**
			 * return a matching value - to edit current mix or create a new mix from this entry
			 */
			private function labelMix(mediaType:String, type:int):String {
				if (type == 2) {
					return resourceManager.getString('cms', 'editmix');
				}
				switch (mediaType) {
					case "1":
					case "2":
					case "5":
						return resourceManager.getString('cms', 'createmixfromentry');
						break;
				}
				
				return "";
			}
			
			private function getModeration(moderationCode:int):String {
				switch (moderationCode) {
					case KalturaEntryModerationStatus.APPROVED:  {
						return resourceManager.getString('cms', 'approved');
					}
					case KalturaEntryModerationStatus.FLAGGED_FOR_REVIEW:  {
						return resourceManager.getString('cms', 'pending');
					}
					case KalturaEntryModerationStatus.REJECTED:  {
						return resourceManager.getString('cms', 'rejected');
					}
					case KalturaEntryModerationStatus.AUTO_APPROVED:  {
						return resourceManager.getString('cms', 'autoApproved');
					}
					case KalturaEntryModerationStatus.PENDING_MODERATION:  {
						return resourceManager.getString('cms', 'pendingModeration');
					}
						
					default:  {
						return ' -- ';
					}
				}
			}
			
			/**
			 * The function translate media type enum to the matching locale string
			 * @param mediaType
			 * @param type - special param for mix since mix is type 2 and other types are type 1 with different mediaTypes
			 */
			private function getMediaTypes(mediaType:String, type:int):String {
				if (type == 2) {
					return resourceManager.getString('cms', 'videoMix');
				}
				switch (mediaType) {
					case "1":
						return resourceManager.getString('cms', 'video');
						break;
					case "2":
						return resourceManager.getString('cms', 'image');
						break;
					case "5":
						return resourceManager.getString('cms', 'audio');
						break;
					case "6":
						return resourceManager.getString('cms', 'videoMix');
						break;
					case "10":
						return resourceManager.getString('cms', 'xml');
						break;
					case KalturaMediaType.LIVE_STREAM_FLASH:
						return resourceManager.getString('cms', 'liveStream');
						break;
				}
				
				return "";
			}

			
		]]>
	</mx:Script>
	<mx:StringValidator id='nameListValidator' source="{name_input}" property="text" triggerEvent="change"
						required="true" requiredFieldError="{resourceManager.getString('cms', 'entryNameIsMandatory')}"/>
	<mx:VBox width="100%" verticalGap="3">
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('cms','name')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextInput width="{TEXT_WIDTH}" text="{selectedEntry.name}"
						  change="{selectedEntry.name = event.target.text}" id="name_input"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('cms','description')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextArea width="{TEXT_WIDTH}" text="{selectedEntry.description}"
						 change="{selectedEntry.description = event.target.text}"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label id="tagsLbl" text="{resourceManager.getString('cms','tags')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:TextInput width="{TEXT_WIDTH}" text="{selectedEntry.tags}"
						  change="{selectedEntry.tags = event.target.text}"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('cms','drillDownCategories')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<utils:AutoComplete width="{TEXT_WIDTH}" text="{selectedEntry.categories}" id='categoriesTextInput'
								dataProvider="{entryDetailsModel.categoriesFullNameList}"
								styleName="autoComplete"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('cms','thumbnail')}:" width="{LABEL_WIDTH}"
					  styleName="drillDownLabel"/>
			<mx:Image id="img" maxWidth="100" maxHeight="75" source="{selectedEntry.thumbnailUrl}"
					  maintainAspectRatio="true" horizontalAlign="center" verticalAlign="top"
					  horizontalCenter="0" verticalCenter="0"/>
			<mx:Canvas>
				<mx:VBox id="thumbnailOptionBox" verticalGap="2" height="100">
					<mx:LinkButton id="uploadNew"
								   label="{resourceManager.getString('cms','uploadNewThumbnail')}"
								   click="{onUploadNowClick()}" paddingLeft="10"/>
					<mx:LinkButton id="captureFromPlayer" paddingLeft="10"
								   label="{resourceManager.getString('cms','captureThumbnail')}"
								   click="{onCaptureClick()}"/>
				</mx:VBox>
				<mx:Canvas id="captureThumbnailCanvas" backgroundColor="yellow" width="208" height="90"
						   styleName="captureThumbnailCanvas" visible="false">
					<mx:Text width="100%" height="100%" selectable="false" styleName="thumbnailMessageText"
							 text="{resourceManager.getString('cms','captureThumbnailMessage')}"/>
					<mx:Button id="thumbPopupCloseBtn" styleName="thumbMessageCloseBtn" right="6" top="6"
							   width="16" height="16"
							   click="{captureThumbnailCanvas.visible = false;captureThumbnailCanvas.includeInLayout=false}"/>
				</mx:Canvas>
			</mx:Canvas>
		</mx:HBox>
		<mx:VBox styleName="lineGap">
			<mx:HBox width="100%" visible="{isLiveStream}" includeInLayout="{isLiveStream}">
				<mx:Label text="{resourceManager.getString('cms','offlineMessage')}" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:TextInput id="offlineMessage" text="{selectedEntry.offlineMessage}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('cms','entryId')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{selectedEntry.id}" selectable="true"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('cms','type')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{getMediaTypes(selectedEntry.mediaType,selectedEntry.type)}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('cms','moderation')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{getModeration(selectedEntry.moderationStatus)}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('cms','flags')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{selectedEntry.flags}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('cms','duration')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{KTimeUtil.formatTime(selectedEntry.duration)}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('cms','createdDate')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{formatDate(selectedEntry.createdAt)}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{resourceManager.getString('cms','creator')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{selectedEntry.userId}"/>
			</mx:HBox>
			<mx:HBox width="100%" visible="false" includeInLayout="false">
				<mx:Label text="{resourceManager.getString('cms','contentWidth')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{selectedEntry.width}"/>
			</mx:HBox>
			<mx:HBox width="100%" visible="false" includeInLayout="false">
				<mx:Label text="{resourceManager.getString('cms','contentHeight')}:" width="{LABEL_WIDTH}"
						  styleName="drillDownLabel"/>
				<mx:Label text="{selectedEntry.height}"/>
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
	<mx:VBox id="kdpContainer" width="100%" height="100%" styleName="lineGap" horizontalAlign="center">
		<mx:HBox width="100%" paddingTop="5">
			<mx:VBox width="100%" horizontalAlign="center">
				<mx:SWFLoader id="kdp3Loader" width="300" height="255" complete="{onKDP3Loaded(event)}"/>
				<mx:HBox width="100%">
					<mx:Label paddingTop="3" text="{resourceManager.getString('cms','embed')}:"
							  width="{LABEL_WIDTH}" styleName="drillDownLabel"/>
					<mx:LinkButton label="{resourceManager.getString('cms','previewAndEmbed')}"
								   click="{openPreview()}" width="100%"
								   enabled="{selectedEntry.status == KalturaEntryStatus.READY}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalGap="0"
						 toolTip="{resourceManager.getString('cms','createmixfromentryTooltip')}"
						 visible="{!isLiveStream}" includeInLayout="{!isLiveStream}">
					<mx:Label paddingTop="3" width="{LABEL_WIDTH}" styleName="drillDownLabel"
							  text="{labelMix(selectedEntry.mediaType,selectedEntry.type)}"/>
					<mx:LinkButton enabled="{checkIfNotAdvanced(selectedEntry)}"
								   label="{resourceManager.getString('cms','simpleEditor')}"
								   click="{onStandardClick()}"
								   buttonMode="{selectedEntry.status == KalturaEntryStatus.READY}"/>
					<mx:Label text="|" textAlign="center"/>
					<mx:LinkButton label="{resourceManager.getString('cms','advancedEditor')}"
								   click="onAdvancedEditor()"
								   enabled="{selectedEntry.status == KalturaEntryStatus.READY}"
								   buttonMode="{selectedEntry.status == KalturaEntryStatus.READY}"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('cms','rating')}:" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel"/>
					<mx:Label text="{selectedEntry.rank}"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('cms','votesCount')}:" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel"/>
					<mx:Label text="{selectedEntry.votes}"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('cms','plays')}:" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel"/>
					<mx:Label text="{selectedEntry.plays}"/>
				</mx:HBox>
				<mx:HBox width="100%" visible="false" includeInLayout="false">
					<mx:Label text="{resourceManager.getString('cms','playerLoades')}:" width="{LABEL_WIDTH}"
							  styleName="drillDownLabel"/>
					<mx:Label text="{selectedEntry.views}"/>
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
</mx:HBox>
