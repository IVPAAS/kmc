<?xml version="1.0" encoding="utf-8"?>
<!---
	 entry drill-down screen.
-->
<navigation:ChangeableDataViewer xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.kaltura.containers.*"
							height="595" width="930" layout="horizontal" horizontalScrollPolicy="off" paddingTop="18"
							showCloseButton="true" close="{onClose()}" help="{onHelp()}"
							xmlns:navigation="com.kaltura.edw.business.*"
							xmlns:ed="com.kaltura.edw.view.*" xmlns:adobe="http://www.adobe.com/2006/fc"
							creationComplete="{onWindowCreationComplete()}"
							xmlns:window="com.kaltura.kmc.modules.content.view.window.*"
							xmlns:control="com.kaltura.edw.control.*">
	<mx:Metadata>
		[ResourceBundle("drilldown")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.analytics.*;
			import com.kaltura.edw.business.Cloner;
			import com.kaltura.edw.business.IDrilldownPanel;
			import com.kaltura.edw.business.KedJSGate;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.events.*;
			import com.kaltura.edw.model.FilterModel;
			import com.kaltura.edw.model.datapacks.*;
			import com.kaltura.edw.vo.FlavorAssetWithParamsVO;
			import com.kaltura.kmvc.control.KMvCEvent;
			import com.kaltura.kmvc.model.KMvCModel;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.utils.KArrayUtil;
			import com.kaltura.utils.SoManager;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaFlavorAsset;
			import com.kaltura.vo.KalturaLiveStreamAdminEntry;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMixEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.PropertyChangeEventKind;
			import mx.resources.ResourceManager;


			// ===================================================================
			// Events:
			// ===================================================================

			/**
			 * the string to dispatch on help events so KMC can interpret them
			 * */
			public static const HELP_REQUEST:String = 'helpRequest';


			// ===================================================================
			// Change Watchers:
			// ===================================================================

			/**
			 * watches when the selected entry on the model changes
			 * */
			private var _entryWatcher:ChangeWatcher;

			/**
			 * watch when the entry index changed
			 * */
			private var _entryIndexWatcher:ChangeWatcher;

			/**
			 * watch when the selected entry's status changed
			 * (to also changed the undoTo entry status)
			 * */
			private var _statusWatcher:ChangeWatcher;

			/**
			 * watch selected entry's replacement status
			 * */
			private var _replacementWatcher:ChangeWatcher;

			/**
			 * watch replacing entry id
			 * */
			private var _replacingEntryWatcher:ChangeWatcher;

			/**
			 * watch loading flag
			 * */
			private var _uiEnabledWatcher:ChangeWatcher;

			/**
			 * a watcher for binding this.enabled to model.loadingFlag
			 * once only.
			 * */
			private var _enabledWatcher:ChangeWatcher;

			/**
			 * watcher for binding
			 * */
			private var _sameRefidWatcher:ChangeWatcher;

			// ===================================================================
			// Data:
			// ===================================================================

			[Bindable]
			private var _entryDp:EntryDataPack;

			[Bindable]
			private var _relatedDp:RelatedFilesDataPack;

			[Bindable]
			private var _clipsDp:ClipsDataPack;

			[Bindable]
			private var _adCuepointsDp:CuePointsDataPack;

			[Bindable]
			private var _captionsDp:CaptionsDataPack;

			[Bindable]
			private var _distDp:DistributionDataPack;

			private var _customDataDp:CustomDataDataPack;

			[Bindable]
			private var _permissionsDp:PermissionsDataPack;

			[Bindable]
			/**
			 * entry details window data
			 * */
			private var _entryDetailsModel:KMvCModel;

			[Bindable]
			/**
			 * filter data
			 * */
			private var _filterModel:FilterModel;

			[Bindable]
			/**
			 * application context
			 * */
			private var _context:ContextDataPack;
			
			public function set entryDetailsModel(value:KMvCModel):void {
				_entryDetailsModel = value;
				if (value) {
					// let commands dispatch events from the current window
					(value.getDataPack(ContextDataPack) as ContextDataPack).dispatcher = this;
					
					_entryDp = value.getDataPack(EntryDataPack) as EntryDataPack;
					_filterModel = (value.getDataPack(FilterDataPack) as FilterDataPack).filterModel;
					_context = value.getDataPack(ContextDataPack) as ContextDataPack;
					_relatedDp = value.getDataPack(RelatedFilesDataPack) as RelatedFilesDataPack;
					_clipsDp = value.getDataPack(ClipsDataPack) as ClipsDataPack;
					_adCuepointsDp = value.getDataPack(CuePointsDataPack) as CuePointsDataPack;
					_captionsDp = value.getDataPack(CaptionsDataPack) as CaptionsDataPack;
					_distDp = value.getDataPack(DistributionDataPack) as DistributionDataPack;
					_customDataDp = value.getDataPack(CustomDataDataPack) as CustomDataDataPack;
					_permissionsDp = value.getDataPack(PermissionsDataPack) as PermissionsDataPack;
					
					if (!_entryWatcher)
						_entryWatcher = BindingUtils.bindProperty(this, "selectedEntry", _entryDp, "selectedEntry");
					if (!_entryIndexWatcher)
						_entryIndexWatcher = BindingUtils.bindProperty(this, "entryIndex", _entryDp, "selectedIndex");
					
					if (!_uiEnabledWatcher) {
						_uiEnabledWatcher = BindingUtils.bindSetter(setUIEnbaled, _entryDetailsModel, "loadingFlag");
					}
					initWindow();
				}
			}
			
			public function get entryDetailsModel():KMvCModel {
				return _entryDetailsModel;
			}

			// ===================================================================
			// 
			// ===================================================================

			[Bindable]
			/**
			 * copy of the selected entry.
			 * we work on this instead of the actual selected entry
			 * (model.selectedEntry) so we can easily revert if needed.
			 * */
			private var _undoToEntry:KalturaBaseEntry;

			private var _selectedEntry:KalturaBaseEntry;

			[Bindable]
			/**
			 * landingPage of current partner
			 * */
			public var landingPage:String;

			/**
			 * this js function will be triggered to show preview
			 * */
			public var openPlayerFunc:String;


			[Bindable]
			/**
			 * show embed option on drilldown
			 * */
			public var showEmbedCode:Boolean = true;

			[Bindable]
			/**
			 * whether we should load roughcuts
			 * */
			public var loadRoughcuts:Boolean = true;


			/**
			 * creation of new entry / edit of existing one
			 * */
			public var isNewEntry:Boolean = true;


			[Bindable]
			/**
			 * whether there was first navigation: meaning init data was loaded, so we can enable tln
			 * */
			private var _hadFirstNavigation:Boolean = false;

			/**
			 * list of tabs which will be visible
			 * */
			private var _visibleTabsAC:ArrayCollection;

			/**
			 * original tabs in initial view stack
			 * */
			private var _originalTabs:Array;


			/**
			 * creationComplete handler finished running
			 * */
			private var _isCreationComplete:Boolean = false;

			/**
			 * should the window be closed after saving entry data
			 * */
			private var _closeAfterSave:Boolean;

			/**
			 * indicates if we should move to the next entry after save is complete. <br>
			 * -1 means go to prev entry, 1 means go to next entry, 0 means no pending entry. 
			 * */
			private var _nextPendingEntry:int = 0;


			[Bindable]
			private var _isUiEnabled:Boolean = true;


			[Bindable]
			public var saveEnabled:Boolean = true;


			/**
			 * stores returned events after calls to <code>validate()</code>
			 * or <code>save()</code>.
			 *
			 * @internal
			 * it is ok to use the same array because
			 * the processes cannot happen simultanously.
			 * */
			private var _results:Array;


			/**
			 * The entry to refer to in the current window.
			 * refers to entryDetailsModel.selectedEntry
			 * */
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}

			public function set selectedEntry(value:KalturaBaseEntry):void {
				var shouldInit:Boolean;
				if (_selectedEntry == null && value) {
					shouldInit = true;
				}
				if (value && value != _selectedEntry) {
					//if the given entry is a different entry than the current one
					var isDifferentEntry:Boolean = (_selectedEntry ? value.id != _selectedEntry.id : true);
					
					clearPanels();
					
					_selectedEntry = value;
					_undoToEntry = Cloner.cloneByEntryType(_selectedEntry);
					
					_selectedEntry.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, copyToUndoTo, false, 0, true);
					
					setWindowTitle();
					
					if (_statusWatcher) {
						_statusWatcher.unwatch();
					}
					_statusWatcher = BindingUtils.bindSetter(onStatusChange, selectedEntry, "status");
					
					if (_replacementWatcher) {
						_replacementWatcher.unwatch();
					}
					_replacementWatcher = BindingUtils.bindSetter(onReplacementStatusChange, selectedEntry, "replacementStatus");
					
					if (_replacingEntryWatcher) {
						_replacingEntryWatcher.unwatch();
					}
					_replacingEntryWatcher = BindingUtils.bindSetter(onReplacingEntryChange, selectedEntry, "replacingEntryId");

					if (_isCreationComplete) {
						if (!isDifferentEntry) {
							// To fix cuepoints synchronization issue: in case we are 
							// still editing the same entry - re-init tabs data after timeout
							setTimeout(initTabsData, 100);
						}
						else {
							if (shouldInit) {
								initWindow();
							}
							else {
								setTabsByEntryType();
								initTabsData();
							}
						}
					}
				}
			}


			public function get visibleTabsAC():ArrayCollection {
				return _visibleTabsAC;
			}

			public function set visibleTabsAC(value:ArrayCollection):void {
				_visibleTabsAC = value;
				if (_isCreationComplete) {
					setVisibleTabs();
					initTabs();
				}
			}
			
			/**
			 * after save, copy new attributes to _undoToEntry
			 * */
			private function copyToUndoTo(e:PropertyChangeEvent):void {
				if (e.kind == PropertyChangeEventKind.UPDATE) {
					_undoToEntry[e.property] = e.newValue;
				}
			}
			
			/**
			 * make panels ready for new entry
			 * */
			private function clearPanels():void {
				if (viewStack) {
					var panel:IDrilldownPanel;
					for (var i:int = 0; i < viewStack.numChildren; i++) {
						panel = viewStack.getChildAt(i) as IDrilldownPanel;
						if (panel) {
							panel.clear();
						}
					}
				}
			}


			/**
			 * select panels and load data
			 * */
			private function initWindow():void {
				if (_isCreationComplete && _entryDetailsModel && _selectedEntry) {
//					trace("initWindow");
					setTabsByEntryType();
					initTabs();
					initTabsData();
				}
			}
			
			private function onHelp():void {
				var anchor:String;
				switch (viewStack.selectedChild) {
					case entryMetaData:
						anchor = 'entry_metadata';
						break;
					case entryThumbnails:
						anchor = 'entry_tumbnails';
						break;
					case entryAcp:
						anchor = 'entry_accesscontrol';
						break;
					case entrySch:
						anchor = 'entry_scheduling';
						break;
					case entryAssets:
						if (_selectedEntry.replacedEntryId) {
							// this is a replacement entry
							anchor = 'entry_replacement';
						}
						else {
							// this is a normal entry
							anchor = 'entry_flavors';
						}
						break;
					case contentTab:
						anchor = 'entry_content';
						break;
					case liveStream:
						anchor = 'section11'; // also in liveStreaming panel
						break;
					case customData:
						anchor = 'entry_customdata';
						break;
					case entryDistribution:
						anchor = 'entry_distribution';
						break;
					case entryCaptions:
						anchor = 'entry_captions';
						break;
					case ads:
						anchor = 'entry_ads';
						break;
					case entryRelated:
						anchor = 'entry_related';
						break;
					case entryClips:
						anchor = 'entry_clips';
						break;

				}
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(EntryDetailsWin.HELP_REQUEST, true);
				e.data = anchor;
				dispatchEvent(e);
			}


			/**
			 * sets the window title, if entry doesn't have content and title yet,
			 * will set the title according to its type
			 * */
			private function setWindowTitle():void {
				if (_undoToEntry.status == KalturaEntryStatus.NO_CONTENT) {
					if (isNewEntry) {
						var mediaType:int = parseInt(_undoToEntry.mediaType);
						switch (mediaType) {
							case KalturaMediaType.IMAGE:
								title = resourceManager.getString('drilldown', 'newImageEntry');
								break;
							case KalturaMediaType.AUDIO:
								title = resourceManager.getString('drilldown', 'newAudioEntry');
								break;
							case KalturaMediaType.VIDEO:
								title = resourceManager.getString('drilldown', 'newVideoEntry');
								break;
						}
						return;
					}
				}

				title = resourceManager.getString('drilldown', 'editEntry') + ' - ';
				if (_undoToEntry.replacedEntryId) {
					title += _entryDp.replacedEntryName + ' (' + resourceManager.getString('drilldown', 'assetReplacement') + ')';

				}
				else {
					title += _undoToEntry.name;

				}
			}


			/**
			 * copy new status to _undoTo entry
			 * */
			private function onStatusChange(value:String):void {
				if (_undoToEntry) {
					_undoToEntry.status = value;
				}
			}


			/**
			 * copy new replacement status to _undoTo entry
			 * */
			private function onReplacementStatusChange(value:String):void {
				if (_undoToEntry) {
					_undoToEntry.replacementStatus = value;
//					_undoToEntry.dispatchEvent(PropertyChangeEvent.createUpdateEvent(_undoToEntry, 'replacementStatus',
//						_undoToEntry.replacementStatus, _undoToEntry.replacementStatus));
				}
			}


			/**
			 * copy new replacing entry id to _undoTo entry
			 * */
			private function onReplacingEntryChange(value:String):void {
				if (_undoToEntry) {
					_undoToEntry.replacingEntryId = value;
				}
			}


			private function onWindowCreationComplete():void {
				// save original tabs
				_originalTabs = new Array();
				for (var i:int = 0; i < viewStack.numChildren; i++) {
					_originalTabs.push(viewStack.getChildAt(i));
				}
				// roles and permissions 
				PermissionManager.getInstance().applyAllAttributes(this, "entryDrilldown");
				_isCreationComplete = true;
				initWindow();
			}
 

			private function setUIEnbaled(value:Boolean):void {
				_isUiEnabled = !value;
			}

			
			/**
			 * removes given tabs from the given tabs list
			 * */
			private function removeTabs(tabsToRemove:Array, tabsList:Array):void {
				for each (var tab:UIComponent in tabsToRemove) {
					KArrayUtil.removeItemFromArray(tab, tabsList);
				}
			}


			/**
			 * if entryChanged will reset all tabs according to entry type
			 * else, will just reload tabs data
			 * */
			private function setTabsByEntryType():void {
				// get a list to work on
				var tabs:Array = _originalTabs.concat();
				var tab:UIComponent;
				// if tabs list was provided, start by leaving only the required tabs
				if (_visibleTabsAC) {
					for (var i:int = tabs.length - 1; i >= 0; i--) {
						tab = tabs[i] as UIComponent;
						if (!_visibleTabsAC.contains(tab.id)) {
							tabs.splice(i, 1);
						}
					}
				}
				// remove tabs which aren't relevant to the different entry types
				if (_undoToEntry is KalturaLiveStreamAdminEntry) {
					removeTabs([entryAssets, contentTab, ads, entryCaptions, entryDistribution], tabs);
				}
				else if (selectedEntry is KalturaMixEntry) {
					//this is a mix
					contentTab.label = ResourceManager.getInstance().getString('drilldown', 'content');
					removeTabs([entryAssets, liveStream, ads, entryDistribution], tabs);
				}
				else {
					// this entry is a regular video/image/audio
					contentTab.label = ResourceManager.getInstance().getString('drilldown', 'mixesTab');
					removeTabs([liveStream], tabs);
					//remove redundant tabs in image and audio cases
					if (selectedEntry.mediaType == KalturaMediaType.IMAGE) {
						removeTabs([entryThumbnails, entryAssets, entryDistribution, entryCaptions, ads, entryRelated], tabs);
					}
					else if (selectedEntry.mediaType == KalturaMediaType.AUDIO) {
						removeTabs([entryDistribution], tabs);
					}
				}
				
				// if uiconf requires removing content tab
				var cdp:ContentDataPack = KMvCModel.getInstance().getDataPack(ContentDataPack) as ContentDataPack;
				if (!cdp.showMixesTab) {
					removeTabs([contentTab], tabs);
				}

				var tabsToHide:Array = PermissionManager.getInstance().getRelevantSubTabsToHide("entryDrilldown");
				var noPermissionTabs:Array = new Array();
				for each (var subtabName:String in tabsToHide) {
					noPermissionTabs.push(this[subtabName]);
				}
				removeTabs(noPermissionTabs, tabs);

				//adds custom data profiles
				for each (tab in tabs) {
					if (tab == customData) {
						if (_filterModel.enableCustomData) {
							if (_filterModel.metadataProfiles && _filterModel.metadataProfiles.length > 0) {
								_customDataDp.metadataInfoArray = new ArrayCollection();
								customData.buildProfiles(_filterModel.metadataProfiles, _filterModel.formBuilders);
							}
						}
						//if none of the profiles contain fields (the only child is the navigation hbox)
						if (customData.profilesVBox.numChildren == 0) {
							removeTabs([customData], tabs);
						}	
						break;
					}
				}
				showTabs(tabs);
			}
			
			
			/**
			 * add the given tabs to the viewstack while removing any other tabs
			 * @param tabs	array with tab references
			 * */
			private function showTabs(tabs:Array):void {
				var tabsAC:ArrayCollection = new ArrayCollection(tabs);
				for each (var tab:UIComponent in _originalTabs) {
					if (tabsAC.contains(tab)) {
						// move to top of stack
						viewStack.addChild(tab);
					}
					else if (tab.parent == viewStack) {
						// not required, remove if exists
						viewStack.removeChild(tab);
					}
				}
				viewStack.selectedIndex = dtn.selectedIndex = 0;
			}


			/**
			 * ask JS to open the preview player, log the action to analytics
			 * */
			private function openPreview(e:Event):void {
				//TODO eliminate, use the function triggered in Content.mxml
				if (openPlayerFunc) {
					var html5Compatible:Boolean = (_undoToEntry is KalturaMediaEntry && (_undoToEntry as KalturaMediaEntry).mediaType == KalturaMediaType.VIDEO) ? true : false;
					var ddp:DistributionDataPack = KMvCModel.getInstance().getDataPack(DistributionDataPack) as DistributionDataPack;
					KedJSGate.doPreviewEmbed(openPlayerFunc, _undoToEntry.id, _undoToEntry.name, cutTo512Chars(_undoToEntry.description), !showEmbedCode, false, null, null, allFlavorAssets(ddp.flavorParamsAndAssetsByEntryId),
						html5Compatible);
				}
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_OPEN_PREVIEW_AND_EMBED, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_OPEN_PREVIEW_AND_EMBED, "content>Open Preview and Embed");

				//First time funnel
				if (!SoManager.getInstance().checkOrFlush(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED))
					GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_FIRST_TIME_PLAYER_EMBED, GoogleAnalyticsConsts.CONTENT);
			}


			/**
			 * extract flavor assets from the given list
			 * @param flavorParamsAndAssetsByEntryId
			 * */
			private function allFlavorAssets(flavorParamsAndAssetsByEntryId:ArrayCollection):Array {
				var fa:KalturaFlavorAsset;
				var result:Array = new Array();
				for each (var kawp:FlavorAssetWithParamsVO in flavorParamsAndAssetsByEntryId) {
					fa = kawp.kalturaFlavorAssetWithParams.flavorAsset;
					if (fa) {
						result.push(fa);
					}
				}
				return result;
			}


			/**
			 * will save the entry if needed, or delete it if user selected not to save
			 * */
			private function newEntryQuestionHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					submitChanges(true);
					//a new entry was added so we should refresh
					/* (entryDetailsModel.getDataPack(ContextDataPack) as ContextDataPack).dispatcher. */
					dispatchEvent(new KedDataEvent(KedDataEvent.ENTRY_UPDATED));
				}
				else {
					// delete the entry we created
					var deleteEntryEvent:KedEntryEvent = new KedEntryEvent(KedEntryEvent.DELETE_ENTRY, _undoToEntry, _undoToEntry.id);
					edwController.dispatch(deleteEntryEvent);
				}
				removeMe();
			}


			/**
			 * "x" button clicked - see if need save or just close.
			 * */
			private function onClose():void {
				if (isNewEntry) {
					Alert.show(resourceManager.getString('drilldown', 'saveNoMediaEntryQ'), resourceManager.getString('drilldown', 'save'), Alert.YES | Alert.NO, null, newEntryQuestionHandler);
				}
				else if (isDataChanged()) {
					// discard changes?
					Alert.show(resourceManager.getString('drilldown', 'undoEntryDetails'), resourceManager.getString('drilldown', 'undoEntryDetailsTitle'), Alert.YES | Alert.NO, null, removeMe);
				}
				else {
					// remove window
					removeMe();
				}
			}


			/**
			 * checks if any data has changed. returns true if entry was changed, otherwise false
			 * */
			private function isDataChanged():Boolean {
				var result:Boolean = false;
				var panel:IDrilldownPanel;
				for (var i:int = 0; i < viewStack.numChildren; i++) {
					if (viewStack.getChildAt(i) is IDrilldownPanel) {
						panel = viewStack.getChildAt(i) as IDrilldownPanel;
						result ||= panel.isChanged();
						// if one panel is changed we have a change, no need to keep checking.
						if (result)
							break;
					}
				}
//				if (!result) {
//					// none of the panels declared a change, see if the entry itself has changed
//					result = !ObjectUtil.compareObjects(selectedEntry, _undoToEntry);
//				}
				return result;
			}

			
			/**
			 * destroy the window and tell the envelope app to remove it
			 * */
			private function removeMe(event:CloseEvent = null):void {
				if ((event == null || event.detail == Alert.YES)) {
					_undoToEntry = null;
					destroyPanels();
					removeWatchers();

//					var dsp:IEventDispatcher = (KMvCModel.getInstance().getDataPack(ContextDataPack) as ContextDataPack).dispatcher;
					/* dsp. */dispatchEvent(new KedDataEvent(KedDataEvent.CLOSE_WINDOW));
				}
			}


			/**
			 * remove all binding watchers
			 * */
			private function removeWatchers():void {
//				if (customData) {	// done in customData.destroy()
//					//first child is navigation hbox
//					for (var i:int = 1; i < customData.numChildren; i++) {
//						var innerCustomData:SingleCustomData = customData.getChildAt(i) as SingleCustomData;
//						if (innerCustomData && innerCustomData.metadataViewWatcher)
//							innerCustomData.metadataViewWatcher.unwatch();
//					}
//				}

				if (_enabledWatcher) {
					_enabledWatcher.unwatch();
				}
				if (_entryWatcher) {
					_entryWatcher.unwatch();
				}
				if (_entryIndexWatcher) {
					_entryIndexWatcher.unwatch();
				}
				if (_statusWatcher) {
					_statusWatcher.unwatch();
				}
				if (_replacementWatcher) {
					_replacementWatcher.unwatch();
				}
				if (_replacingEntryWatcher) {
					_replacingEntryWatcher.unwatch();
				}
				if (_sameRefidWatcher) {
					_sameRefidWatcher.unwatch();
				}
				if (_uiEnabledWatcher) {
					_uiEnabledWatcher.unwatch();
				}
			}


			/**
			 * destroy and clean all viewstack children
			 * */
			private function destroyPanels():void {
				var panel:IDrilldownPanel;
				for (var i:int = 0; i < viewStack.numChildren; i++) {
					if (viewStack.getChildAt(i) is IDrilldownPanel) {
						panel = viewStack.getChildAt(i) as IDrilldownPanel;
						panel.removeEventListener(InternalKedEvent.SAVED, onPanelSaveComplete);
						panel.removeEventListener(ValidationResultEvent.VALIDATION_COMPLETE, onPanelValidationComplete);
						panel.clear();
						panel.destroy();
					}
				}
			}


			/**
			 * displays the validation error and navigates to the relevant tab
			 * */
			private function handleValidationError(tabToGo:DisplayObject, errorString:String = '', errorTitle:String = ''):void {
				if (errorString != '')
					Alert.show(errorString, errorTitle);
				_isUiEnabled = true;
				_nextPendingEntry = 0;
				viewStack.selectedIndex = viewStack.getChildIndex(tabToGo);
			}


			/**
			 * wait for all panels validation to complete while keeping VREs
			 * */
			private function onPanelValidationComplete(e:ValidationResultEvent):void {
				_results.push(e);
				if (_results.length == viewStack.numChildren) {
					// all panels returned results
					var success:Boolean = true;
					for each (var vre:ValidationResultEvent in _results) {
						if (!vre.success) {
							handleValidationError(vre.target as UIComponent, vre.errorMessage, vre.errorTitle);
							success = false;
							// no need to go over other results
							break;
						}
					}
					if (success) {
						// if referenceId was changed
						if (_undoToEntry.referenceId && _undoToEntry.referenceId != KalturaClient.NULL_STRING && _selectedEntry.referenceId != _undoToEntry.referenceId) {
							// list all entries with the same refid , if any - show message
							if (!_sameRefidWatcher) {
								_sameRefidWatcher = BindingUtils.bindSetter(confirmSameRefid, _entryDp, "entriesWSameRefidAsSelected");
							}
							var cg:KMvCEvent = new KedEntryEvent(KedEntryEvent.LIST_ENTRIES_BY_REFID, _undoToEntry);
							edwController.dispatch(cg);
						}
						else {
							// just save it
							save();
						}
					}
				}
			}


			/**
			 * trigger all panels validation
			 * */
			private function validate():void {
				_results = new Array();
				var panel:IDrilldownPanel;
				for (var i:int = 0; i < viewStack.numChildren; i++) {
					if (viewStack.getChildAt(i) is IDrilldownPanel) {
						panel = viewStack.getChildAt(i) as IDrilldownPanel;
						if (!panel.hasEventListener(ValidationResultEvent.VALIDATION_COMPLETE)) {
							panel.addEventListener(ValidationResultEvent.VALIDATION_COMPLETE, onPanelValidationComplete);
						}
						panel.validate();
					}
				}
			}

			
			
			/**
			 * confirm saving entry with existing referenceId
			 * */
			private function confirmSameRefid(value:Object):void {
				if (!value)
					return;

				if (value.length > 0) {
					// we have entries with the same refid
					var ar:Array = [];
					for each (var o:KalturaBaseEntry in value) {
						ar.push(o.id);
					}
					Alert.show(resourceManager.getString('drilldown', 'existingRefid', [_undoToEntry.referenceId, ar]),
						resourceManager.getString('drilldown', 'warning'), Alert.YES | Alert.NO, this, save);
				}
				else {
					save();
				}
				_entryDp.entriesWSameRefidAsSelected = null;
			}


			private function onPanelSaveComplete(e:InternalKedEvent):void {
				_results.push(e);
				if (_results.length == viewStack.numChildren) {
					// all panels finished their save/update process
					saveEntryDetails();
				}
			}


			/**
			 * trigger all panels save/update process
			 * @internal
			 * the close event is there in case the function is triggered from alert
			 * */
			private function save(e:CloseEvent = null):void {
				if (e && e.detail == Alert.NO) {
					_nextPendingEntry = 0;
					return;
				}
				_results = new Array();
				var panel:IDrilldownPanel;
				for (var i:int = 0; i < viewStack.numChildren; i++) {
					if (viewStack.getChildAt(i) is IDrilldownPanel) {
						panel = viewStack.getChildAt(i) as IDrilldownPanel;
						if (!panel.hasEventListener(InternalKedEvent.SAVED)) {
							panel.addEventListener(InternalKedEvent.SAVED, onPanelSaveComplete);
						}
						panel.save();
					}
				}
			}


			/**
			 * update selected entry on server
			 * */
			private function saveEntryDetails():void {
				var cgEvent:KedEntryEvent = new KedEntryEvent(KedEntryEvent.UPDATE_SINGLE_ENTRY, _undoToEntry, _undoToEntry.id);
				cgEvent.data = {entry: _undoToEntry, closeAfterSave: _closeAfterSave, nextEntryPending: _nextPendingEntry};
				if (_closeAfterSave || _nextPendingEntry) {
					cgEvent.source = this;
					cgEvent.onComplete = handleSaveComplete;
				}
				edwController.dispatch(cgEvent);
				
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_EDIT_ENTRY, "EditedtDrillDown", _undoToEntry.id);
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_EDIT_ENTRY + ">entryID>" + _undoToEntry.id, GoogleAnalyticsConsts.CONTENT);
			}

			private function handleSaveComplete():void {
				if (_closeAfterSave) {
					removeMe();
				}
				else if (_nextPendingEntry) {
					setNextEntry();
				}
			}


			/**
			 * Check if a string is longer than 512. if it is it will cut it and add ...
			 */
			private function cutTo512Chars(str:String):String {
				if (!str)
					return "";
				if (str.length >= 509) {
					var tmp:String = str.substr(0, 509);
					var words:Array = tmp.split(" ");
					words.pop();
					tmp = words.join(" ");
					return tmp + "...";
				}
				return str;
			}



			private function onChangeView():void {
				entryMetaData.pausePreview();
				_hadFirstNavigation = true;
				// all data for entry metadata is loaded before the window opens.
				// other panels need data that is loaded when the panel opens, so 
				// we disable them until data is loaded.
				if (viewStack.selectedChild != entryMetaData) {
					if (_entryDetailsModel.loadingFlag) {
						this.enabled = false;
						if (!_enabledWatcher) {
							_enabledWatcher = BindingUtils.bindSetter(setEnabledByLoadingFlag, _entryDetailsModel, "loadingFlag");
						}
					}
				}
			}


			private function setEnabledByLoadingFlag(val:Boolean):void {
				this.enabled = !val;
			}


			/**
			 * list of tabs to remove from the drilldown window, separated by ",".
			 * */
			public function set hideTabs(tabs:String):void {
				var tabsList:Array = tabs.split(",");
				var l:int = tabsList.length;
				var tab:DisplayObject;
				for (var i:int = 0; i < l; i++) {
					tab = viewStack.getChildByName(tabsList[i]);
					if (tab) {
						viewStack.removeChild(tab);
					}
				}
			}


			/**
			 * @private
			 * need the getter because applyPermission reads
			 * the hideTabs value before it sets it.
			 * */
			public function get hideTabs():String {
				return '';
			}


			/**
			 * removes all tabs that their ID doesn't appear in the given array collection
			 * */
			private function setVisibleTabs():void {
				for (var i:int = viewStack.numChildren - 1; i >= 0; i--) {
					var child:UIComponent = viewStack.getChildAt(i) as UIComponent;
					if (!_visibleTabsAC.contains(child.id))
						viewStack.removeChild(child);
				}
			}


			/**
			 * initializes the visible tabs
			 * */
			private function initTabsData():void {
				for (var i:int = viewStack.numChildren - 1; i >= 0; i--) {
					(viewStack.getChildAt(i) as IDrilldownPanel).initData();
				}
				// distribution panel requires the data flavors and thumbnails tab are loading,
				// so if they doesn't exist, will still call their initData func
				if (entryDistribution.parent == viewStack) {
					if (entryAssets.parent != viewStack)
						entryAssets.initData();
					if (entryThumbnails.parent != viewStack)
						entryThumbnails.initData();
				}				
			}

			/**
			 * initializes the visible tabs
			 * */
			private function initTabs():void {
				for (var i:int = viewStack.numChildren - 1; i >= 0; i--) {
					(viewStack.getChildAt(i) as IDrilldownPanel).init();
				}
			}


			/**
			 * see if current entry changed before navigating to the next entry
			 * @param ascending	if true go to next entry, if false go to prev.
			 * */
			private function gotoNextEntry(ascending:Boolean):void {
				_nextPendingEntry = ascending ? 1 : -1;
				if (isDataChanged()) {
					// discard changes?
					Alert.show(resourceManager.getString('drilldown', 'undoEntryDetails'), resourceManager.getString('drilldown', 'undoEntryDetailsTitle'), Alert.YES | Alert.NO, null, setNextEntry);
				}
				else {
					setNextEntry();
				}
			}


			/**
			 * load the next entry
			 * */
			private function setNextEntry(event:CloseEvent = null):void {
				if (_nextPendingEntry == 0) {
					throw new Error("calling setNextEntry() with _nextPendingEntry == 0");
					return;
				}
				if ((event == null || event.detail == Alert.YES)) {
					entryIndex = getNavigatableEntryIndex(_nextPendingEntry == 1, entryIndex);
					var selectEntry:KedEntryEvent = new KedEntryEvent(KedEntryEvent.SET_SELECTED_ENTRY, _entriesAC.getItemAt(entryIndex) as KalturaBaseEntry, '', entryIndex, true);
					edwController.dispatch(selectEntry);
				}
				_nextPendingEntry = 0;
			}


			/**
			 * initializes save process
			 * */
			private function submitChanges(closeAfterSave:Boolean):void {
				//to handle cases of slow system - disable UI even before sending server calls
				_isUiEnabled = false;
				_closeAfterSave = closeAfterSave;
				validate();
			}
		]]>
	</mx:Script>

	<control:EDWController id="edwController"/>

	<mx:TabBar id="dtn" width="140" dataProvider="{viewStack}" direction="vertical" styleName="dtn" useHandCursor="true"
			   buttonMode="true" tabHeight="25" enabled="{!_entryDetailsModel.loadingFlag || _hadFirstNavigation}"/>

	<mx:ViewStack id="viewStack" width="100%" height="100%" change="{onChangeView()}" creationPolicy="all"
				  selectedIndex="{dtn.selectedIndex}" styleName="sectionViewStack">
		<!-- Metadata Tab -->
		<ed:EntryMetadata id="entryMetaData" width="100%" height="100%" styleName="metaDataHbox"
						  label="{ResourceManager.getInstance().getString('drilldown', 'metadata')}"
						  selectedEntry="{_undoToEntry}" context="{_context}" distributionData="{_distDp}"
						  entryData="{_entryDp}" openPreview="{openPreview(event)}" showEmbed="{showEmbedCode}"
						  landingPage="{landingPage}" />
		<!-- Thumbnails Tab -->
		<ed:EntryThumbnails id="entryThumbnails" enableDistribution="{_filterModel.enableDistribution}" 
							label="{ResourceManager.getInstance().getString('drilldown', 'thumbnails')}"
							selectedEntry="{_undoToEntry}" distributionModel="{_distDp}" context="{_context}"
							enabled="{_isUiEnabled}"/>

		<!-- Access Control Tab -->
		<ed:EntryAccessControl id='entryAcp' styleName="accessControlVbox"
							   label="{ResourceManager.getInstance().getString('drilldown', 'accessControl')}"
							   selectedEntry="{_undoToEntry}" filterModel="{_filterModel}"
							   accessControlData="{_filterModel.accessControlProfiles}" enabled="{_isUiEnabled}"/>

		<!-- Scheduling Tab -->
		<ed:EntryScheduling id='entrySch' label="{ResourceManager.getInstance().getString('drilldown', 'scheduling')}"
							selectedEntry="{_undoToEntry}" enabled="{_isUiEnabled}" />

		<!-- Flavor Assets Tab -->
		<ed:EntryFlavors id="entryAssets" styleName="flavorsVbox" model="{_entryDetailsModel}"
						 label="{ResourceManager.getInstance().getString('drilldown', 'videoFiles')}"
						 selectedEntry="{_undoToEntry}" replacementStatus="{_undoToEntry.replacementStatus}"
						 replacingEntryId="{_undoToEntry.replacingEntryId}" status="{_undoToEntry.status}"
						 enabled="{_isUiEnabled}" />

		<!-- content Tab -->
		<ed:EntryContent id="contentTab" selectedEntry="{_undoToEntry}"
						 label="{ResourceManager.getInstance().getString('drilldown', 'mixesTab')}"
						 loadRoughcuts="{loadRoughcuts}" enabled="{_isUiEnabled}"/>

		<!-- Live stream -->
		<ed:EntryLiveStreaming id="liveStream" rootUrl="{_context.rootUrl}"
							   label="{ResourceManager.getInstance().getString('drilldown', 'liveStream')}"
							   selectedEntry="{_undoToEntry}" enabled="{_isUiEnabled}"/>

		<!-- Custom Data -->
		<ed:EntryCustomData id="customData" label="{ResourceManager.getInstance().getString('drilldown', 'customData')}"
							enabled="{_isUiEnabled}" model="{_entryDetailsModel}"/>

		<!-- Distribution Tab -->
		<ed:EntryDistribution id="entryDistribution" selectedEntry="{_undoToEntry}" model="{_entryDetailsModel}" 
							  label="{ResourceManager.getInstance().getString('drilldown', 'distribution')}"
							  viewStack="{viewStack}" enabled="{_isUiEnabled}" />

		<!-- captions -->
		<ed:EntryCaptions2 id="entryCaptions" label="{resourceManager.getString('drilldown','captions')}"
						   selectedEntry="{_undoToEntry}" entryCaptionsArr="{_captionsDp.captionsArray}"
						   enabled="{_isUiEnabled}" />

		<!-- advertisments -->
		<ed:EntryAds id="ads" label="{resourceManager.getString('drilldown','ads')}" selectedEntry="{_undoToEntry}"
					 context="{_context}" model="{_adCuepointsDp}" enabled="{_isUiEnabled}" />

		<!-- related entries -->
		<ed:EntryRelated id="entryRelated" label="{resourceManager.getString('drilldown','relatedEntries')}"
						 selectedEntry="{_undoToEntry}" relatedFiles="{_relatedDp.relatedFilesAC}"
						 enabled="{_isUiEnabled}" />

		<!-- clips -->
		<ed:EntryClips id="entryClips" label="{resourceManager.getString('drilldown','clips')}" 
					   selectedEntry="{_undoToEntry}" clips="{_clipsDp.clips}" enabled="{_isUiEnabled}"/>

	</mx:ViewStack>
	<mx:ControlBar horizontalGap="5">
		<mx:HBox width="33%"/>
		<mx:HBox width="33%" horizontalAlign="center">
			<mx:Button id="saveBtn" label="{resourceManager.getString('drilldown', 'save')}"
					   click="submitChanges(false)" buttonMode="true" enabled="{_isUiEnabled &amp;&amp; saveEnabled}"/>
			<mx:Button id="saveAndCloseBtn" label="{resourceManager.getString('drilldown', 'saveAndClose')}"
					   click="submitChanges(true)" buttonMode="true" enabled="{_isUiEnabled &amp;&amp; saveEnabled}"/>

		</mx:HBox>
		<mx:HBox horizontalAlign="right" width="33%">
			<mx:LinkButton label="{resourceManager.getString('drilldown', 'prevEntry')}" click="gotoNextEntry(false)"
						   buttonMode="true" enabled="{_prevEnabled}" visible="{showNextPrevBtns}"
						   styleName="drillDownNavPrevBtn"/>
			<mx:LinkButton label="{resourceManager.getString('drilldown', 'nextEntry')}" click="gotoNextEntry(true)"
						   buttonMode="true" enabled="{_nextEnabled}" visible="{showNextPrevBtns}"
						   styleName="drillDownNavNextBtn" labelPlacement="left"/>
		</mx:HBox>
	</mx:ControlBar>
</navigation:ChangeableDataViewer>
